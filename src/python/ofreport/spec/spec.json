{
    "Grp100No10": {
        "method": "Configure and connect the Primary-controller on the DUT. Send OFPT_HELLO message to DUT with an incompatible version. Verify correct error message is sent to the controller.", 
        "name": "OFPHFC_INCOMPATIBLE", 
        "number": "Grp100No10", 
        "purpose": "Verify DUT is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 38.When the reason for a Hello failing is due to version incompatibility between switch and controller, then the switch generates OFPT_ERROR msg with Type Field OFPET_HELLO_FAILED and code field OFPHFC_INCOMPATIBLE", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPHFC_INCOMPATIBLE", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "OFPT_ERROR/ OFPET_HELLO_FAILED / OFPHFC_INCOMPATIBLE / No_Compatible_Version", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No100": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBRC_BUFFER_UNKNOWN Error condition.This can be done by specifying a random or unknown buffer_id in the  OFPT_PACKET_OUT message . Verify correct error message is sent to the controller", 
        "name": "OFPBRC_BUFFER_UNKNOWN", 
        "number": "Grp100No100", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 38.When the buffer specified by the controller does not exist, the switch replies back with OFPT_ERROR msg with type field OFPET_BAD_REQUEST\" /* Specified buffer does not exist. */", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBRC_BUFFER_UNKNOWN", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "OFPT_ERROR/ OFPET_BAD_REQUEST / OFPBRC_BUFFER_UNKNOWN / Buffer_Unknown", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No110": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBAC_BAD_TYPE Error condition. This can be done by  sending a flow with  action  OFPAT_OUTPUT  such that type field in the action header is an unknown value. Verify correct error message is sent to the controller .", 
        "name": "OFPBAC_BAD_TYPE", 
        "number": "Grp100No110", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 39.When the type field in the action header specified by the controller is unknown, the switch generates an OFPT_ERROR msg with type field OFPBET_BAD_ACTION and code field OFPBAC_BAD_TYPE\"/* Unknown action type. */", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBAC_BAD_TYPE", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "OFPT_ERROR/ OFPT_BAD_ACTION / OFPBAC_BAD_TYPE / Bad_Type", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No120": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger Error condition. This can be done by sending a flow with action  OFPAT_OUTPUT  such that length field in the action_header is an incorrect value. Verify correct error message is sent to the controller", 
        "name": "OFPBAC_BAD_LEN", 
        "number": "Grp100No120", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 2.When the length field in the action header specified by the controller is wrong, the switch replies back with an OFPT_ERROR msg with Type Field OFPBAC_BAD_LEN\" /* Length problem in actions. */", 
        "remarks": "", 
        "req": "Correct implementation of Error messages", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "OFPT_ERROR/ OFPT_BAD_ACTION / OFPBAC_BAD_LEN / Bad_Length2", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No130": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBAC_BAD_VENDOR Error condition.This can be done by sending a flow with action  OFPAT_VENDOR such that vendor id specified in the  ofp_action_vendor_header is an unknown value. Verify correct error message is sent to the controller", 
        "name": "OFPBAC_BAD_VENDOR", 
        "number": "Grp100No130", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 2.Unknown vendor id specified.", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBAC_BAD_VENDOR", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPT_BAD_ACTION / OFPBAC_BAD_VENDOR / Bad_Vendor", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No140": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBAC_BAD_VENDOR_TYPE Error condition. Verify correct error message is sent to the controller", 
        "name": "OFPBAC_BAD_VENDOR_TYPE", 
        "number": "Grp100No140", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 2.Unknown action type for vendor id", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBAC_BAD_VENDOR_TYPE", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPT_BAD_ACTION / OFPBAC_BAD_VENDOR_TYPE / Bad_Vendor_Type", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No150": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBAC_BAD_OUT_PORT Error condition.This can be done by sending a flow with action OFPAT_OUTPUT to egress_port OFPP_MAX.  Verify correct error message is sent to the controller", 
        "name": "OFPBAC_BAD_OUT_PORT", 
        "number": "Grp100No150", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 2./* When the output to switch port action refers to a port that does not exist, the switch generates an OFPT_ERROR msg , with type field OFPT_BAD_ACTION and code field OFPBAC_BAD_OUT_PORT\"/* Problem validating output action. */", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBAC_BAD_OUT_PORT", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "OFPT_ERROR/ OFPT_BAD_ACTION / OFPBAC_BAD_OUT_PORT / Bad_Out_Port", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No160": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBAC_BAD_ARGUMENT Error condition. This can be done by sending a flow with action OFPAT_SET_VLAN_VID such that vlan_vid specified in the action is an incorrect value. Verify correct error message is sent to the controller", 
        "name": "OFPBAC_BAD_ARGUMENT", 
        "number": "Grp100No160", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 2./* if the arguments specified in the action are wrong , then the switch reponds back with an OFPT_ERROR msg with type field OFPT_BAD_ACTION and code field OFPBAC_BAD_ARGUMENT\"/* Bad action argument. */", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBAC_BAD_ARGUMENT", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "OFPT_ERROR/ OFPT_BAD_ACTION / OFPBAC_BAD_ARGUMENT / Bad_Argument", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No170": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBAC_EPERM Error condition. Verify correct error message is sent to the controller", 
        "name": "OFPBAC_EPERM", 
        "number": "Grp100No170", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 2.Permissions error generated by an entity between a controller and switch, such as an OpenFlow hypervisor\"/* Permissions error. */", 
        "remarks": "This requires an intermediate device or emulation of an intermediate device to generate the permission error.", 
        "req": "Correct implementation of Error message OFPBAC_EPERM", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPT_BAD_ACTION / OFPBAC_EPERM / Permission_Error3", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No180": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBAC_TOO_MANY Error condition. This can be done by sending a flow with lot of actions such that the switch is unable to support them. Verify correct error message is sent to the controller", 
        "name": "OFPBAC_TOO_MANY", 
        "number": "Grp100No180", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 2.if the actions specified by the controller are more than that switch can support, the switch responds back with an OFPT_ERROR msg , with type field OFPT_BAD_ACTION and code field OFPBAC_TOO_MANY\" /* Can't handle this many actions. */", 
        "remarks": "A software switch may not trigger such an error even on very large action_list.", 
        "req": "Correct implementation of Error message OFPBAC_TOO_MANY", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPT_BAD_ACTION / OFPBAC_TOO_MANY / Too_Many Actions", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No190": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBAC_BAD_QUEUE Error condition. This can be done by sending a flow with action OFPAT_ENQUEUE such that queue_id specified in the action is an incorrect value. Verify correct error message is sent to the controller", 
        "name": "OFPBAC_BAD_QUEUE", 
        "number": "Grp100No190", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 2.If the switch is not able to process the Enqueue action specified by the controller then the switch should generate an OFPT_ERROR msg , type field OFPT_BAD_ACTION and code field OFPBAC_BAD_QUEUE \"/* Problem validating output queue. */", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBAC_BAD_QUEUE", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPT_BAD_ACTION / OFPBAC_BAD_QUEUE / Bad_Queue1", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No20": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPHFC_EPERM error condition. Verify correct error message is sent to the controller.", 
        "name": "OFPHFC_EPERM", 
        "number": "Grp100No20", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 38.Permissions error generated by an entity between a controller and switch, such as an OpenFlow hypervisor", 
        "remarks": "This requires an intermediate device or emulation of an intermediate device to generate the permission error.", 
        "req": "Correct implementation of Error message OFPHFC_EPERM", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_HELLO_FAILED / OFPHFC_EPERM / Permission_Error", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No200": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPFMFC_ALL_TABLES_FULL Error condition. This can be done by inserting a lot of flows in the switch such that switch runs out of flow-tables. Verify correct error message is sent to the controller", 
        "name": "OFPFMFC_ALL_TABLES_FULL", 
        "number": "Grp100No200", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 2.if the controller tries to insert a flow-entry when all the flow-tables are full , then the switch should respond back with an OFPT_ERROR msg , type field OFPET_FLOW_MOD_FAILED and code field OFPFMFC_ALL_TABLES_FULL\" /* Flow not added because of full tables. */", 
        "remarks": "", 
        "req": "Correct implementation of Error message  OFPFMFC_ALL_TABLES_FULL", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_FLOW_MOD_FAILED / OFPFMFC_ALL_TABLES_FULL / All_Tables_Full", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No210": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger  Error condition  OFPFMFC_OVERLAP .This can be done by sending a flow with  OFPFF_CHECK_OVERLAP flag set . Send an overlapping flow .. Verify correct error message is sent to the controller", 
        "name": "OFPFMFC_OVERLAP", 
        "number": "Grp100No210", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 40.if the controller tries to insert an overlapping flow-entry with the Check overlap flag set , the switch responds back with an OFPT_ERROR msg, type field OFPET_FLOW_MOD_FAILED and code field OFPFMFC_OVERLAP\"/* Attempted to add overlapping flow with CHECK_OVERLAP flag set. */", 
        "remarks": "", 
        "req": "Correct implementation of Error messages", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "OFPT_ERROR/ OFPET_FLOW_MOD_FAILED / OFPFMFC_OVERLAP / Overlap", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No220": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPFMFC_EPERM Error condition. Verify correct error message is sent to the controller", 
        "name": "OFPFMFC_EPERM", 
        "number": "Grp100No220", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 40.permissions error generated by an entity between a controller and switch, such as an OpenFlow hypervisor\"/* Permissions error. */", 
        "remarks": "This requires an intermediate device or emulation of an intermediate device to generate the permission error.", 
        "req": "Correct implementation of Error message OFPFMFC_EPERM", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_FLOW_MOD_FAILED / OFPFMFC_EPERM / Permission_Error4", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No230": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPFMFC_BAD_EMERG_TIMEOUT Error condition.This can be done by sending an emergency flow i.e a flow with  OFPFF_EMERG flag set and idle_timeout set to a non-zero value.  Verify correct error message is sent to the controller", 
        "name": "OFPFMFC_BAD_EMERG_TIMEOUT", 
        "number": "Grp100No230", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 40.When the emergency flows are added by the controller, (those flows which are marked with emergency bit set), they should have a zero idle/hard timeout. Otherwise, should switch should respond with an OFPT ERROR msg , type field OFPET_FLOW_MOD_FAILED, code field OFPFMFC_BAD_EMERG_TIMEOUT\" /* Flow not added because of non-zero idle/hard timeout", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPFMFC_BAD_EMERG_TIMEOUT", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_FLOW_MOD_FAILED / OFPFMFC_BAD_EMERG_TIMEOUT / Bad_Emergency_Timeout", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No240": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPFMFC_BAD_COMMAND Error condition. This can be done by sending a ofpt_flow_mod message with command field set to an incorrect value. Verify correct error message is sent to the controller", 
        "name": "OFPFMFC_BAD_COMMAND", 
        "number": "Grp100No240", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 40.when the flow_mod msg request is sent by the controller with the some invalid command , the switch responds with an OFPT_ERROR msg , type field OFPET_FLOW_MOD_FAILED and code field OFPFMFC_BAD_COMMAND\" /* Unknown command. */", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPFMFC_BAD_COMMAND", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "OFPT_ERROR/ OFPET_FLOW_MOD_FAILED / OFPFMFC_BAD_COMMAND / Bad_Command", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No250": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPFMFC_UNSUPPORTED Error condition.This can be done by sending a flow with an action list specified such that order of the actions is unsupported. E.g. first action : OFPAT_OUTPUT and second action  OFPAT_SET_DL_SRC . Verify correct error message is sent to the controller", 
        "name": "OFPFMFC_UNSUPPORTED", 
        "number": "Grp100No250", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 40.When the controller sends a flow_mod request with a action list which is not supported by the switch , the switch should respond back with an error msg OFPT_ERROR, type field OFPET_FLOW_MOD_FAILED and code field OFPFMFC_UNSUPPORTED \"\"/* Unsupported action list - cannot process in order specified /*", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPFMFC_UNSUPPORTED", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_FLOW_MOD_FAILED / OFPFMFC_UNSUPPORTED / Unsupported_Actionlist", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No260": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPPMFC_BAD_PORT Error condition. This can be done by sending a OFPT_PORT_MOD message for an invalid port e.g OFPP_MAX .Verify correct error message is sent to the controller", 
        "name": "OFPPMFC_BAD_PORT", 
        "number": "Grp100No260", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 40.if the controller sends a port_mod request for the port that is invalid , the switch will respond back with an OFPT_ERROR msg , type field OFPT_ERROR and code field OFPPMFC_BAD_PORT", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPPMFC_BAD_PORT", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_PORT_MOD_FAILED/ OFPPMFC_BAD_PORT / Bad_Port1", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No270": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPPMFC_BAD_HW_ADDR Error condition. This can be done by sending  OFPT_PORT_MOD message for any port with  hw_addr[OFP_ETH_ALEN] field set to an incorrect value. i.e a value different than what was returned in ofp_phy_port_stuct. Verify correct error message is sent to the controller", 
        "name": "OFPPMFC_BAD_HW_ADDR", 
        "number": "Grp100No270", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 40.If the controller sends a port_mod request for any port with a hardware address that is different from one returned in ofp_phy_port struct. , the switch will respond back with an OFPT_ERROR msg , type field OFPET_PORT_MOD_FAILED and code field OFPPMFC_BAD_PORT\"/* Specified hardware address is wrong. */", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPPMFC_BAD_HW_ADDR", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_PORT_MOD_FAILED/ OFPPMFC_BAD_HW_ADDR / Bad_HW_ADDR", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No280": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPQOFC_BAD_PORT Error condition. This can be done by sending  ofp_queue_stats_request for an invalid port e.g OFPP_MAX. Verify correct error message is sent to the controller", 
        "name": "OFPQOFC_BAD_PORT", 
        "number": "Grp100No280", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 40.If the port specifed for any queue operation (like enqeue --output to queue or retrieving queue stats) is an invalid port , then the switch responds back with an error msg OFPT_ERROR msg , type field OFPET_QUEUE_OP_FAILED , code field OFPQOFC_BAD_PORT\"/* Invalid port (or port does not exist). */", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPQOFC_BAD_PORT", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_QUEUE_OP_FAILED / OFPQOFC_BAD_PORT / Bad_Port", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No290": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPQFC_BAD_QUEUE Error condition.  This can be done by sending  ofp_queue_stats_request for a valid port but an invalid queue_id Verify correct error message is sent to the controller", 
        "name": "OFPQFC_BAD_QUEUE", 
        "number": "Grp100No290", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 40.if the queue_id specifed for any queue operation (like enqeue --output to queue or retrieving queue stats) is an invalid queue , then the switch responds back with an error msg OFPT_ERROR msg , type field OFPET_QUEUE_OP_FAILED , code field OFPQOFC_BAD_QUEUE\"/* Queue does not exist. */", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPQFC_BAD_QUEUE", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_QUEUE_OP_FAILED / OFPQFC_BAD_QUEUE / Bad_Queue", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No30": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBRC_BAD_VERSION  Error conditionThis can be done by sending a OFPT_STATS_REQUEST with version field has 0. Verify correct error message is sent to the controller", 
        "name": "OFPBRC_BAD_VERSON", 
        "number": "Grp100No30", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 38.When the header in the request msg contains a version field which is not supported by the switch, it generates OFPT_ERROR_msg with Type field OFPET_BAD_REQUEST and code field OFPBRC_BAD_VERSION", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBRC_BAD_VERSION", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "OFPT_ERROR/ OFPET_BAD_REQUEST / OFPBRC_BAD_VERSION / Bad_Version", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No300": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger  OFPQOFC_EPERM Error condition. Verify correct error message is sent to the controller", 
        "name": "OFPET_QUEUE_OP_FAILED", 
        "number": "Grp100No300", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 40.", 
        "remarks": "This requires an intermediate device or emulation of an intermediate device to generate the permission error.", 
        "req": "Correct implementation of Error message  OFPQOFC_EPERM", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_QUEUE_OP_FAILED /  OFPQOFC_EPERM  / Permission Error 5", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No40": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger  OFPBRC_BAD_TYPE Error condition.This can be done by sending an unknown request to the switch. Verify correct error message is sent to the controller", 
        "name": "OFPBRC_BAD_TYPE", 
        "number": "Grp100No40", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 38.When the header in the request msg contains a version field which is not supported by the switch, it generates OFPT_ERROR_msg with Type field OFPET_BAD_REQUEST and code field OFPBRC_BAD_VERSION", 
        "remarks": "", 
        "req": "Correct implementation of Error message  OFPBRC_BAD_TYPE", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_BAD_REQUEST /  OFPBRC_BAD_TYPE / Bad_Type", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No50": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger  OFPBRC_BAD_VENDOR Error condition. This can be done by specifying an unknown vendor-id in the  OFPST_VENDOR request. Verify correct error message is sent to the controller", 
        "name": "OFPBRC_BAD_VENDOR", 
        "number": "Grp100No50", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 38.Vendor not supported (in ofp_vendor_header or ofp_stats_request or ofp_stats_reply)", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBRC_BAD_VENDOR", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_BAD_REQUEST / OFPBRC_BAD_VENDOR/ Bad_Vendor", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No60": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger  OFPBRC_BAD_SUBTYPE Error condition. This can be done by specifying an unknown vendor subtype in the OFPST_VENDOR request. Verify correct error message is sent to the controller", 
        "name": "OFPBRC_BAD_SUBTYPE", 
        "number": "Grp100No60", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 38.OFPBRC_BAD_SUBTYPE, /* Vendor subtype not supported.", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBRC_BAD_SUBTYPE", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_BAD_REQUEST / OFPBRC_BAD_SUBTYPE / Bad_Subtype", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No70": {
        "method": "Configure and connect the Primary-controller on the DUT.  Trigger OFPHFC_EPERM error condition. Verify correct error message is sent to the controller.", 
        "name": "OFPBRC_EPERM", 
        "number": "Grp100No70", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 38.Permissions error generated by an entity between a controller and switch, such as an OpenFlow hypervisor", 
        "remarks": "This requires an intermediate device or emulation of an intermediate device to generate the permission error.", 
        "req": "Correct implementation of Error message OFPBRC_EPERM", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_BAD_REQUEST / OFPBRC_EPERM / Permission_Error", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No80": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBRC_BAD_LEN Error condition. This can be done by sending a  OFPT_STATS_REQUEST with incorrect header length. Verify correct error message is sent to the controller", 
        "name": "OFPBRC_BAD_LEN", 
        "number": "Grp100No80", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 38.OFPBRC_BAD_LEN, /* Wrong request length for type. */", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBRC_BAD_LEN", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "OFPT_ERROR/ OFPET_BAD_REQUEST / OFPBRC_BAD_LEN / Bad_Length", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp100No90": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger OFPBRC_BUFFER_EMPTY Error condition.  This can be done by sending two packet_out messages referencing the same buffer. The first packet_out should succeed and empty the buffer, the second packet_out should trigger the error. Verify correct error message is sent to the controller", 
        "name": "OFPBRC_BUFFER_EMPTY", 
        "number": "Grp100No90", 
        "purpose": "Verify Controller is able to respond correctly to error condition", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4 Error Messages, p. 38.When the buffer specified by the controller has already been used , switch replies back with OFPT_ERROR msg with type field OFPET_BAD_REQUEST and code field OFPBRC_BUFFER_EMPTY\" /* Specified buffer has already been used. */", 
        "remarks": "", 
        "req": "Correct implementation of Error message OFPBRC_BUFFER_EMPTY", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "OFPT_ERROR/ OFPET_BAD_REQUEST / OFPBRC_BUFFER_EMPTY / Buffer_Empty", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp10No10": {
        "method": "Startup switch, Configure and connect the Primary-controller on the DUT. Send packets to data plane, verify packets are not forwarded on the data plane", 
        "name": "Startup behavior without established control channel", 
        "number": "Grp10No10", 
        "purpose": "Verify the startup mode, verify no packets are forwarded", 
        "ref": "OpenFlow Switch Errata v1.0.1 4.3 Controller Connection Failure Behavior, p. 8", 
        "remarks": "On initial startup, the switch should not have any emergency rules or flows installed. It should not default to layer 2 forwarding.", 
        "req": "At first startup, the DUT MUST not forward any data plane packets", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Connection Setup / Establish Control Channel / Switch Startup", 
        "topo": "Control-plane connection between DUT and reference controller. At least two data plane connections on the DUT."
    }, 
    "Grp10No100": {
        "method": "Configure and connect the Primary-controller on the DUT. Create normal and emergency flow table entries. Verify with data plane traffic that normal entries are active and emergency flow table entries are not active. Fail control channel. Verify with data plane traffic that emergency flow entries are now active, and normal entries are inactive. Check the flow table to verify normal entries are deleted.", 
        "name": "Emergency mode removes standard flow entries", 
        "number": "Grp10No100", 
        "purpose": "Verify switch deletes all normal flow entries when emergency mode is activated", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.3 Connection interruption, p. 13All normal entries are deleted when entering emergency mode", 
        "remarks": "", 
        "req": "After activating the emergency rule set all normal entries in the flow table MUST be deleted.", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Connection interruption / Primary control channel lost / Emergency mode removes standard flow entries", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections on the DUT."
    }, 
    "Grp10No110": {
        "method": "Configure and connect the Primary-controller on the DUT. Create emergency flow table entries. Fail control channel. After reconnection of the control channel, verify with data plane traffic that the emergency flow table entries stay active.", 
        "name": "Emergency rules after control channel reconnection", 
        "number": "Grp10No110", 
        "purpose": "Verify switch keeps the emergency rules active after reconnection to a controller.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.3 Connection interruption, p. 13Upon connecting to a controller again, the emergency flow entries remain. The controller then has the option of deleting all flow entries, if desired.", 
        "remarks": "", 
        "req": "After reconnection to the controller, the emergency rule set MUST stay active.", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Connection interruption / Primary control channel lost / Emergency rules after control channel reconnection", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections on the DUT."
    }, 
    "Grp10No120": {
        "method": "Configure and connect the Primary-controller on the DUT. Create normal flow table entries with different timeouts. Fail control channel. Verify with data plane traffic that flow table entries stay active and time out as expected. After reconnection of the control channel, verify with data plane traffic that the flow table entries left in the flow table stay active and time out as expected.", 
        "name": "Fail secure mode", 
        "number": "Grp10No120", 
        "purpose": "Verify switch keeps the normal flow table active after losing the control channel. Verify the entries time out as expected. Verify flow table entries stay active after reconnection.", 
        "ref": "OpenFlow Switch Errata 1.0.1, 4.3 Controller Connection Failure Behavior, p. 8In \u201dfail secure mode\u201d, the only change to switch behavior is that packets and messages destined to the controllers are dropped. Flow entries should continue to expire according to their timeouts in \u201dfail secure mode", 
        "remarks": "", 
        "req": "After losing the control channel, normal flow entries MUST stay active and time out as expected. After reconnection, flow entries MUST stay active and time out as expected.", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Connection interruption / Primary control channel lost / Fail secure mode", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections on the DUT."
    }, 
    "Grp10No20": {
        "method": "Follow methodology for each sub-test (10.20a-d).", 
        "name": "Configure and establish control channel", 
        "number": "Grp10No20", 
        "purpose": "Test all methods of control channel establishment", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.2 Connection setup / p. 12, 4.4 Encryption / p. 13", 
        "remarks": "", 
        "req": "A control channel MUST be established between the DUT and reference controller using at least 1 of 4 methods.", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Connection Setup/ Establish Control Channel / Encrypted, Unencrypted, Default & non-Default TCP port Combinations", 
        "topo": "Control-plane connection between DUT and reference controller"
    }, 
    "Grp10No20a": {
        "method": "Reference controller must be running and reachable at configured IP and Port 6633. Configure DUT to connect with reference controller using unencrypted TCP. If required, manually configure switch to connect to controller using TCP port 6633.", 
        "name": "Use default tcp port", 
        "number": "Grp10No20a", 
        "purpose": "Test unencrypted control channel establishment on default TCP port", 
        "ref": "OpenFlow Switch Specification 1.0.0 / 4.2 Connection setup / p. 12The switch must be able to establish the communication at a user-configurable (but otherwise fixed) IP address, using a user-specified port.", 
        "remarks": "", 
        "req": "A control channel MUST be established between the DUT and reference controller without encryption on the default TCP port 6633.", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Connection Setup/ Establish Control Channel/ TCP using default port 6633", 
        "topo": "Control-plane connection between DUT and reference controller"
    }, 
    "Grp10No20b": {
        "method": "Reference controller must be running and reachable at configured IP and Port. Configure DUT to connect with reference controller using unencrypted TCP. Manually configure switch to connect to controller using previously configured TCP port.", 
        "name": "Use non-default tcp port", 
        "number": "Grp10No20b", 
        "purpose": "Test unencrypted control channel establishment on default TCP port", 
        "ref": "OpenFlow Switch Specification 1.0.0 / 4.2 Connection setup / p. 12The switch must be able to establish the communication at a user-configurable (but otherwise fixed) IP address, using a user-specified port.", 
        "remarks": "", 
        "req": "A control channel MUST be established between the DUT and reference controller without encryption on a non-default TCP port.", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Connection Setup/ Establish Control Channel/ TCP using non-default port", 
        "topo": "Control-plane connection between DUT and reference controller"
    }, 
    "Grp10No20c": {
        "method": "Reference controller must be running and reachable at configured IP and non-default Port. Configure DUT to connect with reference controller using encrypted TLS.", 
        "name": "Use TLS with non-default tcp port", 
        "number": "Grp10No20c", 
        "purpose": "Test encrypted control channel establishment on non-default TCP port", 
        "ref": "OpenFlow Switch Specification 1.0.0 / 4.4 Encryption/ p. 13The TLS connection is initiated by the switch on startup to the controller\u2019s server, which is located by default on TCP port 6633", 
        "remarks": "", 
        "req": "A control channel MUST be established between the DUT and reference controller with encryption on a non-default TCP port.", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Connection Setup/ Establish Control Channel/ TLS using non-default port.", 
        "topo": "Control-plane connection between DUT and reference controller"
    }, 
    "Grp10No30": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify version field in Hello message.", 
        "name": "Supported version announcement", 
        "number": "Grp10No30", 
        "purpose": "Check the Switch reports the correct version to the controller", 
        "ref": "OpenFlow Switch Specification 1.0.0 / 4.2 Connection Setup / p. 12When an OpenFlow connection is first established, each side of the connection must immediately send an OFPT_HELLO message with the version field set to the highest OpenFlow protocol version supported by the sender.", 
        "remarks": "", 
        "req": "The DUT MUST announce the correct protocol version 1.0", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Connection Setup / Establish control channel / Supported version announcement", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp10No40": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify switch negotiates the correct version with the controller.", 
        "name": "Supported version negotiation", 
        "number": "Grp10No40", 
        "purpose": "Check the Switch negotiates the correct version with the controller", 
        "ref": "OpenFlow Switch Specification 1.0.0 / 4.2 Connection Setup / p. 12Upon receipt of this message, the recipient may calculate the OpenFlow protocol version to be used as the smaller of the version number that it sent and the one that it received.", 
        "remarks": "In this case, the controller announces the correct version, so negotiation to version 1.0 should succeed.", 
        "req": "The DUT MUST negotiate the correct version to use on the control channel", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Connection Setup / Establish control channel / Supported version negotiation", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp10No50": {
        "method": "Configure and connect the Primary-controller on the DUT. The controller sends an unsupported version, which prevents version negotiation from succeeding. The Error message is verified in packet traces or controller logs.", 
        "name": "No common version negotiated", 
        "number": "Grp10No50", 
        "purpose": "Verify the switch reports the correct error message and terminates the connection when no common version can be negotiated with the controller.", 
        "ref": "OpenFlow Switch Specification 1.0.0/4.2 Connection Setup/p. 12if the negotiated version is supported by the recipient, then the connection proceeds. Otherwise, the recipient must reply with an OFPT_ERROR message with a type field of OFPET_HELLO_FAILED, a code field of OFPHFC_COMPATIBLE, and optionally an ASCII string explaining the situation in data, and then terminate the connection.", 
        "remarks": "", 
        "req": "The DUT MUST handle version negotiation as described in the specification.", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Error messages / Connection Setup / Establish control channel / No common version negotiated", 
        "topo": "Control-plane connection between DUT and reference controller"
    }, 
    "Grp10No60": {
        "method": "Configure Primary-controller and Backup-controller on the DUT. Fail the Primary-controller connection by echo request timeout. Verify the device tries to connect to the Backup-controller. This can be done by packet trace or established connection to Backup-controller.", 
        "name": "Echo timeout triggering connection attempt to Backup-controller", 
        "number": "Grp10No60", 
        "purpose": "Verify switch tries to contact Backup-controller after losing connection to Primary-controller.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.3 Connection interruption, p. 12in the case that a switch loses contact with the controller, as a result of an echo request timeout, TLS session timeout, or other disconnection, it should attempt to contact one or more backup controllers. The ordering of the controller IP addresses is not specified by the protocol.", 
        "remarks": "", 
        "req": "If supported and configured, the DUT MUST contact a Backup-controller after losing connection with the Primary-controller", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Connection interruption / Primary control channel lost / Echo timeout triggering connection attempt to Backup-controller", 
        "topo": "Control-plane connection between DUT and reference controller"
    }, 
    "Grp10No70": {
        "method": "Configure Primary-controller and Backup-controller on the DUT. Fail the Primary-controller connection by TLS Session timeout. Verify the device tries to connect to the Backup-controller. This can be done by packet trace or established connection to Backup-controller.", 
        "name": "TLS Session timeout triggering connection attempt to Backup-controller", 
        "number": "Grp10No70", 
        "purpose": "Verify switch tries to contact Backup-controller after losing connection to Primary-controller.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.3 Connection interruption, p. 12in the case that a switch loses contact with the controller, as a result of an echo request timeout, TLS session timeout, or other disconnection, it should attempt to contact one or more backup controllers. The ordering of the controller IP addresses is not specified by the protocol.", 
        "remarks": "", 
        "req": "If supported and configured, the DUT MUST contact a Backup-controller after losing connection with the Primary-controller", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Connection interruption / Primary control channel lost / TLS Session timeout triggering connection attempt to Backup-controller", 
        "topo": "Control-plane connection between DUT and reference controller"
    }, 
    "Grp10No80": {
        "method": "Configure and connect the Primary-controller on the DUT. Fail the Primary-controller connection. Verify the device attempts to re-connect to the controller. Verify the frequency of reconnection attempts. Verify with packet trace.", 
        "name": "Losing the control channel triggers connection attempts", 
        "number": "Grp10No80", 
        "purpose": "Verify switch tries to reconnect after losing control channel, check whether retries and backoff are applied as configured on the DUT.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.3 Connection interruption, p. 12if some number of attempts to contact a controller (zero or more) fail, the switch must enter \u201cemergency mode\u201d and immediately reset the current TCP connection.", 
        "remarks": "Method for generating control channel failure is unspecified", 
        "req": "After losing the control channel, the DUT MUST try to re-establish a connection with the controller", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Connection interruption / Primary control channel lost / Losing the control channel triggers connection attempts", 
        "topo": "Control-plane connection between DUT and reference controller"
    }, 
    "Grp10No90": {
        "method": "Configure and connect the Primary-controller on the DUT.Create emergency flow table entries. Verify with data plane traffic that emergency flow table entries are not active. Fail control channel. Verify with data plane traffic that emergency flow entries are activated.", 
        "name": "Losing the control channel triggers emergency mode", 
        "number": "Grp10No90", 
        "purpose": "Verify switch activates emergency rules after losing control channel connections.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.3 Connection interruption, p. 12In emergency mode, the matching process is dictated by the emergency flow table entries (those marked with the emergency bit when added to the switch", 
        "remarks": "", 
        "req": "After losing the control channel, the DUT MUST activate the emergency rule set.", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Connection interruption / Primary control channel lost / Losing the control channel triggers emergency mode", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections on the DUT."
    }, 
    "Grp20No10": {
        "method": "Configure and connect the Primary-controller on the DUT. Send ofpt_features_request to the DUT; verify ofpt_features_reply is returned.", 
        "name": "Verify Features Request / Reply is implemented", 
        "number": "Grp20No10", 
        "purpose": "Verify that a basic Features Request generates a Features Reply.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.1.1 Controller to Switch, p. 10.Features: Upon Transport Layer Security (TLS) session establishment, the controller sends a features request message to the switch. The switch must reply with a features reply that specifies the capabilities supported by the switch", 
        "remarks": "", 
        "req": "Generate a Features Reply in response to a Features Request", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Controller to Switch messages / Features / Verify Features Request/Reply is implemented.", 
        "topo": "Control-plane connection between DUT and reference controller"
    }, 
    "Grp20No100": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify from controller log or packet trace that a ofpt_hello message is generated, and the version field correctly populated", 
        "name": "Verify basic Hello messages are implemented", 
        "number": "Grp20No100", 
        "purpose": "Verify basic Hello message generation with correct version field", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.1.3 Symmetric, p. 11.Hello: Hello messages are exchanged between the switch and controller upon connection startup.", 
        "remarks": "", 
        "req": "Hello message is implemented", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Symmetric Messages / Hello / Verify basic Hello messages are implemented", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp20No110": {
        "method": "Configure and connect the Primary-controller on the DUT. Send ofpt_echo_request. Verify from controller log or packet trace that ofpt_echo_reply message is generated.", 
        "name": "Verify Echo Reply messages are implemented", 
        "number": "Grp20No110", 
        "purpose": "Verify basic Echo Reply generation", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.1.3 Symmetric, p. 11.Hello: Echo: Echo request/reply messages can be sent from either the switch or the controller, and must return an echo reply. They can be used to indicate the latency, bandwidth, and/or liveness of a controller-switch connection", 
        "remarks": "", 
        "req": "ofpt_echo_request/reply is implemented", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Symmetric Messages / Echo / Verify Echo Reply messages are implemented", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp20No20": {
        "method": "Configure and connect the Primary-controller on the DUT. Send ofpt_get_config_request to the DUT, verify ofpt_get_config_reply is returned.", 
        "name": "Verify basic Config Request is implemented", 
        "number": "Grp20No20", 
        "purpose": "Verify that a basic Get Config Request does not generate an error.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.1.1 Controller to Switch, p. 10.Configuration: The controller is able to set and query confi..................Page Break..................guration parameters in the switch. The switch only responds to a query from the controller.", 
        "remarks": "", 
        "req": "Generate a Config Reply in response to a Config Request", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Controller to Switch messages / Configuration / Verify basic Config Request is implemented", 
        "topo": "Control-plane connection between DUT and reference controller"
    }, 
    "Grp20No30": {
        "method": "Configure and connect the Primary-controller on the DUT. Send ofpt_flow_mod command ofpfc_add to the DUT, verify no Error is returned", 
        "name": "Verify basic Modify state Add message is implemented", 
        "number": "Grp20No30", 
        "purpose": "Verify that a basic Flow ADD request does not generate an error.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.1.1 Controller to Switch, p. 10.Modify-State: Modify-State messages are sent by the controller to manage state on the switches. Their primary purpose is to add/delete and modify Flows in the Flow tables and to set switch port properties", 
        "remarks": "", 
        "req": "Modify Flow Add implemented", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Controller to Switch messages / Modify state / Verify basic Modify state Add message is implemented", 
        "topo": "Control-plane connection between DUT and reference controller"
    }, 
    "Grp20No40": {
        "method": "Configure and connect the Primary-controller on the DUT. Send ofpt_flow_mod command ofpfc_delete to the DUT, verify no Error is returned", 
        "name": "Verify basic Modify state Delete message is implemented", 
        "number": "Grp20No40", 
        "purpose": "Verify that a basic Flow Delete request does not generate an error.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.1.1 Controller to Switch, p. 10.Modify-State: Modify-State messages are sent by the controller to manage state on the switches. Their primary purpose is to add/delete and modify Flows in the Flow tables and to set switch port properties", 
        "remarks": "", 
        "req": "Modify Flow Delete implemented", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Controller to Switch messages / Modify state / Verify basic Modify state Delete message is implemented", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp20No50": {
        "method": "Configure and connect the Primary-controller on the DUT. Send ofpt_flow_mod command ofpfc_modify to the DUT, verify no Error is returned", 
        "name": "Verify basic Modify Flow Modify message is implemented", 
        "number": "Grp20No50", 
        "purpose": "Verify that a basic Modify State Modify request does not generate an error.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.1.1 Controller to Switch, p. 10.Modify-State: Modify-State messages are sent by the controller to manage state on the switches. Their primary purpose is to add/delete and modify Flows in the Flow tables and to set switch port properties", 
        "remarks": "", 
        "req": "Modify Flow Delete implemented", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Controller to Switch messages / Modify state / Verify basic Modify State Modify message is implemented", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp20No60": {
        "method": "Configure and connect the Primary-controller on the DUT. Send ofpt_stats_request to the DUT. Verify ofpt_stats_reply is received", 
        "name": "Verify basic Read state is implemented", 
        "number": "Grp20No60", 
        "purpose": "Verify that a basic Read state request does not generate an error.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.1.1 Controller to Switch, p. 10.Read-State: Read-State messages are used by the controller to collect statistics from the switch\u2019s flow-tables, ports and the individual flow entries", 
        "remarks": "", 
        "req": "Read state is implemented", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Controller to Switch messages / Read state / Verify basic Read state is implemented", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp20No70": {
        "method": "Configure and connect the Primary-controller on DUT. Send ofpt_packet message to DUT. Verify no error is returned.", 
        "name": "Verify basic send packet is implemented", 
        "number": "Grp20No70", 
        "purpose": "Verify that a basic send packet request does not generate an error.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.1.1 Controller to Switch, p. 10.Send-Packet: These are used by the controller to send packets out of a specified port on the switch", 
        "remarks": "", 
        "req": "Send packet implemented", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Controller to Switch messages / Send packet / Verify basic send packet is implemented", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection on the DUT."
    }, 
    "Grp20No80": {
        "method": "Configure and connect the Primary-controller on the DUT. Send basic barrier request to the DUT; verify no Error is returned.", 
        "name": "Verify basic barrier request-reply is implemented", 
        "number": "Grp20No80", 
        "purpose": "Verify that a basic barrier request does not generate an error.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.1.1 Controller to Switch, p. 10.Barrier: Barrier request/reply messages are used by the controller to ensure message dependencies have been met or to receive notifications for completed operations.", 
        "remarks": "", 
        "req": "Basic barrier request-reply implemented", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Controller to Switch messages / Barrier / Verify basic barrier request-reply is implemented", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp20No90": {
        "method": "Configure and connect the Primary-controller on the DUT. Send packet to the DUT data plane port; verify the controller receives a packet_in.", 
        "name": "Packet_in generation", 
        "number": "Grp20No90", 
        "purpose": "Verify that non matched data plane packets generate a packet_in to the controller", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.1.2 Asynchronous, p. 10.Packet-in: For all packets that do not have a matching Flow entry, a packet-in event is sent to the controller.", 
        "remarks": "", 
        "req": "Packet_in is implemented", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Asynchronous Messages / Packet_in generation", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection on the DUT."
    }, 
    "Grp30No10": {
        "method": "Configure and connect the Primary-controller on the DUT. Move a subset of ports into the flood group, create flow entry with flood action, generate matching data plane packet. Verify only ports in the flood group output packet. Verify all ports in the flood group output the packet.", 
        "name": "Flood control port mod message", 
        "number": "Grp30No10", 
        "purpose": "Verify Controller is able to control flooding with port mod messages", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.5 Spanning Tree, p. 13.Switches that do not support 802.1D spanning tree must allow the controller to specify the port status for packet flooding through the port-mod messages", 
        "remarks": "For Example: 4 data plane ports - 1 input port, 2 output ports in the flood group, 1 output port not in flood group.", 
        "req": "Port mod ofppc_no_flood flag is implemented", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / No Spanning Tree / Flood control port mod message", 
        "topo": "Control-plane connection between DUT and reference controller.At least 4 data plane connections to the DUT."
    }, 
    "Grp30No100": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify current port state for OFPPC_NO_PACKET_IN; if OFPPC_NO_PACKET_IN is enabled, disable it. Verify on control plane that packets reaching this port generate packet_in messages. Enable OFPPC_NO_PACKET_IN. Verify on control plane that packets reaching the port do not generate packet_in messages. Disable OFPPC_NO_PACKET_IN again. Verify on control plane that packets are now generating packet_in again.", 
        "name": "No Packet_in", 
        "number": "Grp30No100", 
        "purpose": "Verify Controller is able to enable and disable OFPPC_NO_PACKET_IN", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.2.1 Port Structures, p. 17.OFPPC_NO_FWD=1<<5, Drop packets forwarded to port.", 
        "remarks": "The DUT must end in state OFPPC_NO_PACKET_IN=0 for subsequent tests.", 
        "req": "DUT is able to get and set port state OFPPC_NO_FWD, and all packets on the port are dropped.", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Spanning Tree / Config / No Packet_in", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp30No110": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow rule forwarding STP packets from port 1 to port 2. Verify STP packets do not trigger a flow match as the local STP processes them first.", 
        "name": "STP classification", 
        "number": "Grp30No110", 
        "purpose": "Verify DUT is able to process STP locally first.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.5 Spanning Tree, p. 13.If spanning tree is supported, process packets locally first. OpenFlow switches may OPTIONALLY support 802.1D Spanning Tree Protocol. Those switches that do support it are expected to process all 802.1D packets locally before performing flow lookup.", 
        "remarks": "", 
        "req": "DUT is HYBRID and able to run a local Spanning Tree.", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / Hybrid / STP classification", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp30No120": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify the OFPC_STP bit in the \u2019capabilities\u2019 field of the DUT\u2019s OFPT_FEATURES_REPLY message is set by checking the controller log or packet trace.", 
        "name": "STP features reply", 
        "number": "Grp30No120", 
        "purpose": "Verify a DUT that implements STP sets the OFPC_STP bit in the \u2019capabilities\u2019 field of its OFPT_FEATURES_REPLY message", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.5 Spanning Tree, p. 13.A switch that implements STP must set the OFPC_STP bit in the \u2019capabilities\u2019 field of its OFPT_FEATURES_REPLY message", 
        "remarks": "", 
        "req": "The DUT MUST set the OFPC_STP bit if it supports Spanning Tree.", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / Hybrid / STP features reply", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp30No130": {
        "method": "Configure and connect the Primary-controller on the DUT. Activate Local STP on all available physical ports.", 
        "name": "STP on all physical ports", 
        "number": "Grp30No130", 
        "purpose": "Verify a DUT that implements Local STP supports STP on all physical ports", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.5 Spanning Tree, p. 13.A switch that implements STP must make it available on all of its physical ports, but it need not implement it on virtual ports (e.g. OFPP_LOCAL)", 
        "remarks": "", 
        "req": "A switch that implements Local STP MUST make it available on all of its physical ports", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / Hybrid / STP on all physical ports", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp30No140": {
        "method": "Configure and connect the Primary-controller on the DUT. Activate Local STP on all available physical ports. Force Local STP to disable at least one port (one method would be to create a loop between two ports). Use controller to send packets to the OFP_FLOOD port. Verify packets are only forwarded along the Local STP topology.", 
        "name": "Flood along STP topology", 
        "number": "Grp30No140", 
        "purpose": "Verify a DUT that implements Local STP floods packets only along the locally determined STP topology", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.5 Spanning Tree, p. 13.Port status, as specified by the spanning tree protocol, is then used to limit packets forwarded to the OFP_FLOOD port to only those ports along the spanning tree", 
        "remarks": "", 
        "req": "A switch that implements STP locally MUST adapt the ofppc_flood status of ports to the external STP topology", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / Hybrid / Flood along STP topology", 
        "topo": "Control-plane connection between DUT and reference controller.At least 4 data plane ports connected to DUT."
    }, 
    "Grp30No150": {
        "method": "Configure and connect the Primary-controller on the DUT. Activate Local STP on all available physical ports. Force Local STP topology change so STP port state on the DUT changes (one method would be to create a loop between two ports). Verify port_update message is sent to the controller.", 
        "name": "STP triggers port_update message", 
        "number": "Grp30No150", 
        "purpose": "Verify a DUT that implements Local STP reports port state changes caused by Local STP back to the controller", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.5 Spanning Tree, p. 13.Port changes as a result of the spanning tree are sent to the controller via port-update messages", 
        "remarks": "", 
        "req": "Local STP reports port state changes caused by STP back to the controller", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / Hybrid / STP triggers port_update message", 
        "topo": "Control-plane connection between DUT and reference controller.At least 4 data plane ports connected to DUT."
    }, 
    "Grp30No160": {
        "method": "Configure and connect the Primary-controller on the DUT. Activate Local STP on all available physical ports. Verify at least one of the connected ports is blocked by spanning tree (one method would be to create a loop between two ports). Create a flow with target OFP_ALL; send a matching packet, verify it gets output from the blocked port. Create a flow explicitly forwarding a packet to the blocked port, send matching packet, verify packet gets output from the blocked port.", 
        "name": "OFP_ALL or explicit out_port override STP", 
        "number": "Grp30No160", 
        "purpose": "Verify OFP_ALL and explicit out_port actions ignore Local STP generated port state when forwarding packets.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.5 Spanning Tree, p. 13.Note that forward actions that specify the outgoing port or OFP_ALL ignore the port status set by the spanning tree protocol", 
        "remarks": "", 
        "req": "A switch MUST forward packets to OFP_ALL or explicit set port, ignoring the port status set by the spanning tree protocol", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / Hybrid / OFP_ALL or explicit out_port override STP", 
        "topo": "Control-plane connection between DUT and reference controller.At least 4 data plane ports connected to DUT."
    }, 
    "Grp30No170": {
        "method": "Configure and connect the Primary-controller on the DUT. Activate Local STP on all available physical ports. Send STP packets; they should not generate packet_in events as they are processed by the external STP. Disable STP on one port; verify STP packets from this port now generate packet_in events.", 
        "name": "Enable \u2013 Disable STP per port", 
        "number": "Grp30No170", 
        "purpose": "Verify the DUT allows enabling and disabling Local STP per port, and changes forwarding behavior accordingly", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.5 Spanning Tree, p. 13.The switch must support disabling spanning tree per port. Packets received on ports that are disabled by spanning tree must follow the normal flow table processing path", 
        "remarks": "", 
        "req": "When a Local STP port state changes from STP enabled to ATP disabled, the packets received on that port MUST be processed by the normal flow table processing path.", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / Hybrid / Enable \u2013 Disable STP per port", 
        "topo": "Control-plane connection between DUT and reference controller.At least 4 data plane ports connected to DUT."
    }, 
    "Grp30No20": {
        "method": "Configure and connect the Primary-controller on the DUT. Send ofpt_features_request and verify port config bits are set according to the DUT config", 
        "name": "Port config bits", 
        "number": "Grp30No20", 
        "purpose": "Verify Controller is able to read the current Spanning Tree state", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.5 Spanning Tree, p. 13.The port config bits indicate whether a port has been administratively brought down, options for handling 802.1D spanning tree packets, and how to handle incoming and outgoing packets. These bits, configured over multiple switches, enable an OpenFlow network to safely flood packets along either a custom or 802.1D spanning tree; When OFPPFL_NO_STP is 0, STP controls the OFPPFL_NO_FLOOD and OFPPFL_STP_* bits directly. OFPPFL_NO_FLOOD is set to 0 when the STP port state is Forwarding, otherwise to 1. The bits in OFPPFL_STP_MASK are set to one of the other OFPPFL_STP_* values according to the current STP port state.", 
        "remarks": "", 
        "req": "Port mod OFPPFL_STP_* and OFPPFL_NO_* config bits are implemented", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / Config / Port config bits", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp30No40": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify current port state; if port is down bring port up. Send port down message; verify port is down. Send port up message; verify port is up again.", 
        "name": "Port administratively down", 
        "number": "Grp30No40", 
        "purpose": "Verify Controller is able to bring port up and down", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.2.1 Port Structures, p. 17.OFPPC_PORT_DOWN =1<<0, /* Port is administratively down.", 
        "remarks": "Port must end in a port_up state for subsequent tests.", 
        "req": "DUT is able to get and set port state \u201dadministratively down\u201d", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Spanning Tree / Config / Port administratively down", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to the DUT."
    }, 
    "Grp30No50": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify current port state; if 802.1D is enabled, disable it. Using features_request, verify that ofppc_stp bit=0. Enable Spanning Tree.  Using features_request, verify that ofppc_stp bit=1. Disable Spanning Tree.  Using features_request, verify that ofppc_stp bit=0.", 
        "name": "Disable 802.1D Spanning Tree", 
        "number": "Grp30No50", 
        "purpose": "Verify Controller is able to enable and disable Spanning Tree on port", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.2.1 Port Structures, p. 17.OFPPC_NO_STP=1<<1, /* Disable 802.1D spanning tree on port", 
        "remarks": "Testing of non-OpenFlow Spanning Tree implementation is out of scope.", 
        "req": "DUT is able to get and set port state \u201dDisable 802.1D \u201d", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / Config / Disable 802.1D Spanning Tree", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp30No60": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify current port state for OFPPC_NO_RECV; if OFPPC_NO_RECV is enabled, disable it. Verify on data plane port that Spanning Tree packets are received, all other packet types are also received. Enable OFPPC_NO_RECV. Verify on data plane port that Spanning Tree packets are still received, all other packet types are now dropped. Disable OFPPC_NO_RECV again. Verify on data plane port that Spanning Tree packets are still received, and all other packet types are received again.", 
        "name": "Drop all except 802.1D", 
        "number": "Grp30No60", 
        "purpose": "Verify Controller is able to enable and disable OFPPC_NO_RECV", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.2.1 Port Structures, p. 17.OFPPC_NO_RECV=1<<2, /* Drop all packets except 802.1D spanning tree packets.", 
        "remarks": "", 
        "req": "DUT is able to get and set port state \u201dOFPPC_NO_RECV \u201d", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / Config / Drop all except 802.1D", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp30No70": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify current port state for OFPPC_NO_RECV _STP; if OFPPC_NO_RECV _STP is enabled, disable it. Verify on data plane port that Spanning Tree packets are received, all other packet types are also received. Enable OFPPC_NO_RECV. Verify on data plane port that Spanning Tree packets are dropped, all other packet types are still received. Disable OFPPC_NO_RECV again. Verify on data plane port that Spanning Tree packets are now received, and all other packet types are still received.", 
        "name": "Forward all except 802.1D", 
        "number": "Grp30No70", 
        "purpose": "Verify Controller is able to enable and disable OFPPC_NO_RECV_STP", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.2.1 Port Structures, p. 17.OFPPC_NO_RECV_STP=1<3, Drop received 802.1D STP packets.", 
        "remarks": "", 
        "req": "DUT is able to get and set port state \u201dOFPPC_NO_RECV_STP\u201d, and all 802.1D packets on the port are dropped, all other packets are forwarded", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / Config / Forward all except 802.1D", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp30No80": {
        "method": "Configure and connect the Primary-controller on the DUT. Move a subset of ports into the flood group, create flow entry with flood action, generate matching data plane packet. Verify only ports in the flood group output packet. Verify all ports in the flood group output the packet.", 
        "name": "Flood control port mod message", 
        "number": "Grp30No80", 
        "purpose": "Verify Controller is able to control flooding with port mod messages", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.5 Spanning Tree, p. 13.Switches that do not support 802.1D spanning tree must allow the controller to specify the port status for packet flooding through the port-mod messages", 
        "remarks": "For Example: 4 data plane ports - 1 input port, 2 output ports in the flood group, 1 output port not in flood group.", 
        "req": "Port mod ofppc_no_flood flag is implemented", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Spanning Tree / No Spanning Tree / Flood control port mod message", 
        "topo": "Control-plane connection between DUT and reference controller.At least 4 data plane connections to the DUT."
    }, 
    "Grp30No90": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify current port state for OFPPC_NO_FWD; if OFPPC_NO_FWD is enabled, disable it. Create flow rule forwarding to one port. Verify on data plane that packets are forwarded to that port. Enable OFPPC_NO_FWD. Verify on data plane that packets are now dropped. Disable OFPPC_NO_FWD again. Verify on data plane that packets are forwarded again.", 
        "name": "Drop all egress packets on port", 
        "number": "Grp30No90", 
        "purpose": "Verify Controller is able to enable and disable OFPPC_NO_FWD", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.2.1 Port Structures, p. 17.OFPPC_NO_FWD=1<<5, Drop packets forwarded to port.", 
        "remarks": "The DUT must end in state OFPPC_NO_FWD=0 for subsequent tests.", 
        "req": "DUT is able to get and set port state OFPPC_NO_FWD, and all packets on the port are dropped.", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Spanning Tree / Config / Drop all egress packets on port.", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp40No10": {
        "method": "Configure and connect the Primary-controller on the DUT. Add flow 1 into flow table. Try to add overlapping flow with \u201ccheck overlap\u201d flag set into flow table. Verify the correct error message is returned. Verify flow is not entered into flow table.", 
        "name": "Overlap checking", 
        "number": "Grp40No10", 
        "purpose": "Verify that overlap checking generates an error when the controller attempts to add an overlapping flow to the flow table.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.For ADD requests with the OFPFF_CHECK_OVERLAP flag set, the switch must first check for any overlapping flow entries. Two flow entries overlap if a single packet may match both, and both entries have the same priority. If an overlap conflict exists between an existing flow entry and the ADD request, the switch must refuse the addition and respond with an ofp_error_msg with OFPET_FLOW_MOD_FAILED type and OFPFMFC_OVERLAP code", 
        "remarks": "", 
        "req": "DUT implements overlap checking", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / ADD / Overlap checking", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No100": {
        "method": "Configure and connect the Primary-controller on the DUT. Insert a flow. Send data plane packets to increase counters. Modify the flow action with OFPFC_MODIFY_STRICT. Get flow statistics, verify counters are preserved.", 
        "name": "Modify_strict of action preserves counters", 
        "number": "Grp40No100", 
        "purpose": "Verify that modifying the action of a flow does not reset counters for modify_strict", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.Otherwise, the actions field is changed on the existing entry and its counters and idle time fields are left unchanged.", 
        "remarks": "", 
        "req": "Modifying the action of an existing flow preserves counters for modify strict", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify / Modify_strict action preserves counters", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp40No110": {
        "method": "Configure and connect the Primary-controller on the DUT. Send a delete request for a non-existent flow. Verify no error is returned.", 
        "name": "Delete non-existent flow", 
        "number": "Grp40No110", 
        "purpose": "Verify that deleting a non-existent flow does not generate an error", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.For DELETE requests, if no flow entry matches, no error is recorded, and no flow table modification occurs.", 
        "remarks": "", 
        "req": "Deleting a non-existent flow does not generate an error", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify / Delete non-existent flow", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No120": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate two flows, one of them with OFPFF_SEND_FLOW_REM set. Delete both entries, verify only the one with the OFPFF_SEND_FLOW_REM flag set, generates an OFPT_FLOW_REMOVED message.", 
        "name": "Delete flows with and without flow_removed flag set", 
        "number": "Grp40No120", 
        "purpose": "Verify that deleting a flow with send flow removed flag set triggers a flow removed message, and deleting a flow without the send flow removed flag set does not trigger a flow removed message.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.If flow entries match, and must be deleted, then each normal entry with the OFPFF_SEND_FLOW_REM flag set should generate a flow removed message.", 
        "remarks": "", 
        "req": "Correct implementation of the OFPFF_SEND_FLOW_REM flag", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify / Delete flows with and without flow_removed flag set", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No130": {
        "method": "Configure and connect the Primary-controller on the DUT. Insert a flow with the OFPFF_EMERG flag set. Send flow_mod message command DELETE with the OFPFF_EMERG flag set. Verify no OFPT_FLOW_REMOVED message is generated.", 
        "name": "Delete emergency flow", 
        "number": "Grp40No130", 
        "purpose": "Verify that deleting an emergency flow does not trigger a flow removed message.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.Deleted emergency flow entries generate no flow removed messages", 
        "remarks": "", 
        "req": "Correct implementation of emergency flow removal", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Flow Table Modification Messages / Modify / Delete emergency flow", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No140": {
        "method": "Configure and connect the Primary-controller on the DUT. In this case, strict_delete and delete are identical. Insert a flow F1 with all header fields set. Issue a strict_delete message matching F1, and verify F1 is deleted. Insert a flow F2 with all header fields set. Issue a delete message matching F2, and verify F2 is deleted.", 
        "name": "Delete without wildcards", 
        "number": "Grp40No140", 
        "purpose": "Verify that flow_mod delete and strict_delete map to the correct flows", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.MODIFY and DELETE flow mod commands have corresponding STRICT versions. Without STRICT appended, the wildcards are active and all flows that match the description are modified or removed. If STRICT is appended, all fields, including the wildcards and priority, are strictly matched against the entry, and only an identical flow is modified or removed", 
        "remarks": "", 
        "req": "Correct implementation of strict and non strict matching", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify / Delete without wildcards", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No150": {
        "method": "Configure and connect the Primary-controller on the DUT. In this case both flows are matched by the wildcards in the delete.Insert a flow T1 with all header fields set, except Ethernet source address, this is wildcarded. Insert a flow T2 with only ingress port set, all other fields are wilcarded. The ingress port of T2 is identical to the ingress port of T1. Issue a delete message matching on ingress port of both flows (T1,T2), all other fields are wild carded. Verify that both flows (T1, T2) are deleted.", 
        "name": "Delete with wildcards set", 
        "number": "Grp40No150", 
        "purpose": "Verify that delete maps to the correct flows", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.MODIFY and DELETE flow mod commands have corresponding STRICT versions. Without STRICT appended, the wildcards are active and all flows that match the description are modified or removed. If STRICT is appended, all fields, including the wildcards and priority, are strictly matched against the entry, and only an identical flow is modified or removed", 
        "remarks": "", 
        "req": "Correct implementation of non strict delete matching", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify / Delete with wildcards set", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No160": {
        "method": "Configure and connect the Primary-controller on the DUT. In this case, only T2 matches. Insert a flow T1 with all header fields set, except Ethernet source address, this is wildcarded. Insert a flow T2 with only ingress port set, all other fields are wilcarded. The ingress port of T2 is identical to the ingress port of T1. Issue a strict_delete message matching on ingress port of both flows (T1,T2), all other fields are wild carded. Verify that only flow T2 gets deleted.", 
        "name": "Strict_Delete with wildcards set", 
        "number": "Grp40No160", 
        "purpose": "Verify that strict_delete maps to the correct flows", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.MODIFY and DELETE flow mod commands have corresponding STRICT versions. Without STRICT appended, the wildcards are active and all flows that match the description are modified or removed. If STRICT is appended, all fields, including the wildcards and priority, are strictly matched against the entry, and only an identical flow is modified or removed", 
        "remarks": "", 
        "req": "Correct implementation of strict_delete matching", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify / Strict_Delete with wildcards set", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No170": {
        "method": "Configure and connect the Primary-controller on the DUT. Insert a priority 100 flow T1 with all header fields set, except Ethernet source address, this is wildcarded. Insert a priority 200 flow T2 with only ingress port set, all other fields are wilcarded. The ingress port of T2 is identical to the ingress port of T1. Insert a flow T3, identical to T2, except the Priority is set to 300. Issue a delete message matching on ingress port of all flows (T1, T2, T3) with priority 200 as additional constraint. All other fields are wild carded. Verify all flows (T1, T2, T3) are deleted.", 
        "name": "Testing that delete message ignores priorities", 
        "number": "Grp40No170", 
        "purpose": "Verify that delete maps to the correct flows", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.MODIFY and DELETE flow mod commands have corresponding STRICT versions. Without STRICT appended, the wildcards are active and all flows that match the description are modified or removed. If STRICT is appended, all fields, including the wildcards and priority, are strictly matched against the entry, and only an identical flow is modified or removed", 
        "remarks": "", 
        "req": "Correct implementation of non strict delete matching", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify / Testing that delete message ignores priorities", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No180": {
        "method": "Configure and connect the Primary-controller on the DUT. Insert a priority 100 flow T1 with all header fields set, except Ethernet source address, this is wildcarded. Insert a priority 200 flow T2 with only ingress port set, all other fields are wilcarded. The ingress port of T2 is identical to the ingress port of T1. Insert a flow T3, identical to T2, except the Priority is set to 300. Issue a strict_delete message matching on ingress port of all flows (T1, T2, T3) with priority 200 as additional constraint. All other fields are wild carded.  Verify only T2 gets deleted.", 
        "name": "Testing that strict_delete message does not ignore priorities", 
        "number": "Grp40No180", 
        "purpose": "Verify that delete maps to the correct flows", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.MODIFY and DELETE flow mod commands have corresponding STRICT versions. Without STRICT appended, the wildcards are active and all flows that match the description are modified or removed. If STRICT is appended, all fields, including the wildcards and priority, are strictly matched against the entry, and only an identical flow is modified or removed", 
        "remarks": "", 
        "req": "Correct implementation of strict and non strict matching", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify Testing that strict_delete message does not ignore priorities", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No190": {
        "method": "Configure and connect the Primary-controller on the DUT. Insert two identical flows forwarding to two different out_ports. Send an exact match delete request for these flows, but specify only one of the two ports as out_port. Check that only the flow with the specified out_port is deleted.", 
        "name": "Delete with constraint out_port", 
        "number": "Grp40No190", 
        "purpose": "Verify that delete supports filtering on action out_port", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.DELETE and DELETE STRICT commands can be optionally filtered by output port. If the out_port field contains a value other than OFPP_NONE, it introduces a constraint when matching. This constraint is that the rule must contain an output action directed at that port.", 
        "remarks": "", 
        "req": "Correct implementation of filtering delete commands based on out_port", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify / Delete with constraint out_port", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp40No20": {
        "method": "Configure and connect the Primary-controller on the DUT. Add flow 1 into flow table. Add overlapping flow with \u201ccheck overlap\u201d flag not set into flow table. Verify no error message is returned. Verify flow is entered into flow table.", 
        "name": "No overlap checking", 
        "number": "Grp40No20", 
        "purpose": "Verify that no overlap checking does not generate an error when the controller attempts to add an overlapping flow to the flow table.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.For valid (non-overlapping) ADD requests, or those with no overlap checking, the switch must insert the flow entry at the lowest numbered table for which the switch supports all wildcards set in the flow_match structure, and for which the priority would be observed during the matching process.\"", 
        "remarks": "", 
        "req": "DUT implements adding overlapping flows", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / ADD / No overlap checking", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No200": {
        "method": "Configure and connect the Primary-controller on the DUT. Send command ofp_flow_mod add with out_port value set to some port.  Verify flow is added but out_port field is ignored.   Send command ofp_flow_mod modify with out_port value set to some port . Verify flow modification takes places but, out_port is ignored.", 
        "name": "out_port ignored by Add and Modify requests", 
        "number": "Grp40No200", 
        "purpose": "Verify that out_port values in FLOW_MOD Add or Modify requests are ignored.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.DELETE and DELETE STRICT commands can be optionally filtered by output port. If the out_port field contains a value other than OFPP_NONE, it introduces a constraint when matching.\u2026This field is ignored by ADD, MODIFY, and MODIFY STRICT messages", 
        "remarks": "Flow Delete, Delete_Strict, Add, Modify and Modify Strict all share the same format.", 
        "req": "Correct implementation of FLOW_MOD Add and Modify requests", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify / out_port ignored by Add and Modify requests", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp40No210": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with hard timeout = 1 sec and OFPFF_SEND_FLOW_REM flag set. Send for n seconds packets matching the flow to the data plane, then stop. Verify the OFPT_FLOW_REMOVED message is received with duration_sec field set to 1 sec", 
        "name": "Timeout with flow removed message", 
        "number": "Grp40No210", 
        "purpose": "Verify flow removed message for timeout is implemented", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.7 Flow removal, p. 15.When the OFPFF_SEND_FLOW_REM flag is set, the switch must send a flow removed message when the flow expires. The default is for the switch to not send flow removed messages for newly added flows", 
        "remarks": "", 
        "req": "Correct implementation of flow removed messages for timeout", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Flow removal / Timeout with flow removed message", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp40No220": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with idle timeout = 1 sec. Send packets matching the flow to the data plane for n seconds, then stop. Verify the flow expiration message is received and duration_sec field is (n+1)sec.", 
        "name": "Idle timeout", 
        "number": "Grp40No220", 
        "purpose": "Verify that idle timeout is implemented", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.7 Flow removal, p. 15.Each flow entry has an idle_timeout and a hard_timeout associated with it. If no packet has matched the rule in the last idle_timeout seconds, or it has been hard_timeout seconds since the flow was inserted, the switch removes the entry and sends a flow removed message.", 
        "remarks": "", 
        "req": "Correct implementation of idle timeout", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Flow removal / Idle timeout", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp40No230": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with hard timeout = 1 sec. Send packets matching the flow to the data plane for n >= 2 second, then stop. Verify the flow expiration message is received and duration_sec field is 1sec", 
        "name": "hard timeout", 
        "number": "Grp40No230", 
        "purpose": "Verify that hard timeout is implemented", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.7 Flow removal, p. 15.Each flow entry has an idle_timeout and a hard_timeout associated with it. If no packet has matched the rule in the last idle_timeout seconds, or it has been hard_timeout seconds since the flow was inserted, the switch removes the entry and sends a flow removed message.", 
        "remarks": "", 
        "req": "Correct implementation of hard timeout", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Flow removal / hard timeout", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp40No30": {
        "method": "Configure and connect the Primary-controller on the DUT. Add flow 1 into flow table. Send matching packets to data plane to increase counters. Add identical flow into flow table. Verify the new flow replaces the existing flow. Verify the counters are reset.", 
        "name": "Identical flows", 
        "number": "Grp40No30", 
        "purpose": "Verify that adding an identical flow overwrites the existing flow and clears the counters", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.If a flow entry with identical header fields and priority already resides in any table, then that entry, including its counters, must be removed, and the new flow entry added.\"", 
        "remarks": "", 
        "req": "DUT implements adding identical flows while resetting counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / ADD / Identical flows", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp40No40": {
        "method": "Configure and connect the Primary-controller on the DUT. Create and add flows until flow table is full, verify OFPFMFC_ALL_TABLES_FULL error message is generated.", 
        "name": "No table to add", 
        "number": "Grp40No40", 
        "purpose": "Verify that flow table full error messages are generated.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.If a switch cannot find any table in which to add the incoming flow entry, the switch should send an ofp_error_msg with OFPET_FLOW_MOD_FAILED type and OFPFMFC_ALL_TABLES_FULL code", 
        "remarks": "", 
        "req": "DUT returns correct error code when flow table is full.", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / ADD / No table to add", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No50": {
        "method": "Configure and connect the Primary-controller on the DUT. Create and add flow pointing to a never existing port number. Verify  OFPBAC_BAD_OUT_PORT  error message is generated", 
        "name": "Never valid output port", 
        "number": "Grp40No50", 
        "purpose": "Verify that adding a flow with a never valid output port number triggers correct error", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.If the action list in a flow mod message references a port that will never be valid on a switch, the switch must return an ofp_error_msg with OFPET_BAD_ACTION type and OFPBAC_BAD_OUT_PORT code", 
        "remarks": "", 
        "req": "DUT returns correct error code when never valid port is referenced as output port", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / ADD / Never valid output port", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No60": {
        "method": "Configure and connect the Primary-controller on the DUT. Create and add flow pointing to a currently non-existant port number.", 
        "name": "Currently non-existant output port", 
        "number": "Grp40No60", 
        "purpose": "Verify that adding a flow with action OFPAT_OUTPUT to a currently not available port number (but possibly available later) generates one of the two possible responses from the switch", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.If the referenced port may be valid in the future, e.g. when a line card is added to a chassis switch, or a port is dynamically added to a software switch, the switch may either silently drop packets sent to the referenced port or immediately return an OFPBAC_BAD_OUT_PORT error and refuse the flow mod", 
        "remarks": "", 
        "req": "DUT accepts flow pointing to a port that may be valid in the future.", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Flow Table Modification Messages / ADD / Currently non-existant output port Version A", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No60a": {
        "method": "Configure and connect the Primary-controller on the DUT. Create and add flow pointing to a currently non-existant port number. Verify flow is added, but packets are dropped", 
        "name": "Currently non-existant output port Version A", 
        "number": "Grp40No60a", 
        "purpose": "Verify that adding a flow with action output to a currently not available port number (but possibly available later) gets added, and silently drops packets", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.If the referenced port may be valid in the future, e.g. when a line card is added to a chassis switch, or a port is dynamically added to a software switch, the switch may either silently drop packets sent to the referenced port", 
        "remarks": "Version A option", 
        "req": "DUT accepts flow pointing to a port that may be in the future valid. Packets are dropped until then.", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Flow Table Modification Messages / ADD / Currently non-existant output port Version A", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No60b": {
        "method": "Configure and connect the Primary-controller on the DUT. Create and add flow pointing to a currently non-existant port number. Verify flow is not added, but error message generated", 
        "name": "Currently non-existent port Version B", 
        "number": "Grp40No60b", 
        "purpose": "Verify that adding a flow with action output to a currently not available port number triggers correct error message", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.or immediately return an OFPBAC_BAD_OUT_PORT error and refuse the flow mod", 
        "remarks": "Version B option", 
        "req": "DUT does not accept flow pointing to a port that may be in the future valid, and generates correct error message", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Flow Table Modification Messages / ADD /Currently non-existant port Version B", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No70": {
        "method": "Configure and connect the Primary-controller on the DUT. Create and add emergency flow with timeout = 0, verify flow gets added. Create and add emergency flow with non-zero timeout, verify flow does not get added. Verify  OFPFMFC_BAD_EMERG_TIMEOUT  error message is returned.", 
        "name": "No timeout for emergency flows", 
        "number": "Grp40No70", 
        "purpose": "Verify that adding an emergency flow with a non-zero timeout value triggers correct error message.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.Emergency flow mod messages must have timeout values set to zero. Otherwise, the switch must refuse the addition and respond with an ofp_error_msg with OFPET_FLOW_MOD_FAILED type and OFPFMFC_BAD_EMERG_TIMEOUT code", 
        "remarks": "", 
        "req": "DUT only accepts timeout = 0 for emergency flows, all other values MUST trigger correct error message", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Flow Table Modification Messages / ADD / No timeout for emergency flows", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No80": {
        "method": "Configure and connect the Primary-controller on the DUT. Send a modify request targeting a non-existent flow. Verify the flow gets added with zeroed counters", 
        "name": "Modify non-existent flow", 
        "number": "Grp40No80", 
        "purpose": "Verify that modifying a non-existent flow adds the flow with zeroed counters.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.For MODIFY requests, if a flow entry with identical header fields does not current reside in any table, the MODIFY acts like an ADD, and the new flow entry must be inserted with zeroed counters", 
        "remarks": "", 
        "req": "DUT allows modifying non-existent flows and adds the respective flow to the flow table", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify / Modify non-existent flow", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp40No90": {
        "method": "Configure and connect the Primary-controller on the DUT. Insert a flow. Send data plane packets to increase counters. Modify the flow action with OFPFC_MODIFY. Get flow statistics, verify counters were preserved.", 
        "name": "Modify action preserves counters", 
        "number": "Grp40No90", 
        "purpose": "Verify that modifying the action of a flow does not reset counters", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification Messages, p. 13.Otherwise, the actions field is changed on the existing entry and its counters and idle time fields are left unchanged.", 
        "remarks": "", 
        "req": "Modifying the action of an existing flow preserves the flow counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Flow Table Modification Messages / Modify / Modify action preserves counters", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp50No10": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with all header fields wildcarded and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet is forwarded only to the second port.", 
        "name": "All Wildcards", 
        "number": "Grp50No10", 
        "purpose": "Test matching a global (all wildcards) Flow", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching all wildcards", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Data plane / Matching / All Wildcards", 
        "topo": "Control-plane connection between DUT and reference controller.At least three data plane connections to DUT."
    }, 
    "Grp50No100": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except IP protocol and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "IP protocol (uint8_t nw_proto)", 
        "number": "Grp50No100", 
        "purpose": "Matching against a flow with IP protocol set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching IP protocol", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching Single Header Field/ IP protocol (uint8_t nw_proto)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No110": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except IP TOS and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "IP TOS bits (uint8_t nw_tos)", 
        "number": "Grp50No110", 
        "purpose": "Matching against a flow with IP TOS bits set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching IP TOS bits", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching Single Header Field/ IP TOS bits (uint8_t nw_tos)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No120a": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except TCP/UDP source port and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "TCP/UDP source port (uint16_t tp_src)", 
        "number": "Grp50No120", 
        "purpose": "Matching against a flow with TCP/UDP source port set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "For IP packets that are TCP or UDP (IP protocol is equal to 6 or 17), the lookup includes the transport ports. For IP packets that are ICMP (IP protocol is equal to 1), the lookup includes the Type and Code fields", 
        "req": "Correct implementation of Matching TCP/UDP source port", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching Single Header Field/ TCP/UDP source port (uint16_t tp_src)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    },
    "Grp50No120b": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except TCP/UDP source port and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "TCP/UDP source port (uint16_t tp_src)", 
        "number": "Grp50No120", 
        "purpose": "Matching against a flow with TCP/UDP source port with ICMP type set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "For IP packets that are TCP or UDP (IP protocol is equal to 6 or 17), the lookup includes the transport ports. For IP packets that are ICMP (IP protocol is equal to 1), the lookup includes the Type and Code fields", 
        "req": "Correct implementation of Matching TCP/UDP source port", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching Single Header Field/ TCP/UDP source port (uint16_t tp_src)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No130a": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except TCP/UDP destination port and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "TCP/UDP destination port (uint16_t tp_dst)", 
        "number": "Grp50No130", 
        "purpose": "Matching against a flow with TCP/UDP destination port set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "For IP packets that are TCP or UDP (IP protocol is equal to 6 or 17), the lookup includes the transport ports. For IP packets that are ICMP (IP protocol is equal to 1), the lookup includes the Type and Code fields", 
        "req": "Correct implementation of Matching TCP/UDP destination port", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching Single Header Field/ TCP/UDP destination port (uint16_t tp_dst)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    },
    "Grp50No130b": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except TCP/UDP destination port and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "TCP/UDP destination port (uint16_t tp_dst)", 
        "number": "Grp50No130", 
        "purpose": "Matching against a flow with TCP/UDP destination port with ICMP type set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "For IP packets that are TCP or UDP (IP protocol is equal to 6 or 17), the lookup includes the transport ports. For IP packets that are ICMP (IP protocol is equal to 1), the lookup includes the Type and Code fields", 
        "req": "Correct implementation of Matching TCP/UDP destination port", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching Single Header Field/ TCP/UDP destination port (uint16_t tp_dst)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No140": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except Ingress Port, Ethernet source address, Ethernet destination address, Ethernet type and VLAN id, action OFPAT_OUTPUT set to egress port. Send a packet matching the flow. Verify the packet is forwarded only to the second port. Send a non-matching packet. Verify a packet_in is generated and the packet is not forwarded on the data plane.", 
        "name": "L2", 
        "number": "Grp50No140", 
        "purpose": "Matching against a flow with Ingress Port, Ethernet source address, Ethernet destination address, Ethernet type and VLAN id set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "On hybrid switches VLAN id ranges may need to be preconfigured.", 
        "req": "Correct implementation of Matching all L2 profile fields", 
        "results": "Pass or Fail or Not Tested", 
        "status": "L2", 
        "title": "Data plane / Matching Multiple Header Fields / L2", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No150": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except Ingress Port, IP source address and netmask, IP destination address and netmask, and Ethernet type with action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "L3", 
        "number": "Grp50No150", 
        "purpose": "Matching against a flow with Ingress Port, IP source address and netmask, IP destination address and netmask and Ethernet type set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching all L3 profile fields", 
        "results": "Pass or Fail or Not Tested", 
        "status": "L3", 
        "title": "Data plane / Matching Multiple Header Fields / L3", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No160": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except Ingress Port, IP protocol TCP/UDP source port, TCP/UDP destination port and Ethernet type with action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "L4", 
        "number": "Grp50No160", 
        "purpose": "Matching against a flow with Ingress Port, IP protocol, TCP/UDP source port, TCP/UDP destination port and Ethernet type set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching all L4 fields", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching Multiple Header Fields / L4", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No170": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields set. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "Exact match", 
        "number": "Grp50No170", 
        "purpose": "Matching against a flow with all Header fields set. (Under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Exact Matching", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching Multiple Header Fields / Exact match", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No180": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields set, action output port two. Add a second flow with at least one field not wildcarded and highest possible priority, action output port three. Send a packet matching both flows to the data plane. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "Exact match priority", 
        "number": "Grp50No180", 
        "purpose": "Verifying that a flow with all Header fields set has the highest priority. (Under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.Packets are matched against flow entries based on prioritization. An entry that specifies an exact match (i.e., it has no wildcards) is always the highest priority", 
        "remarks": "", 
        "req": "Correct implementation of Matching", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching / Exact match priority", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No190": {
        "method": "Configure and connect the Primary-controller on the DUT. Add two flows with different priorities. Send a packet matching both flows to the data plane. Verify the packet matches the higher priority flow.", 
        "name": "Match priorities", 
        "number": "Grp50No190", 
        "purpose": "Verifying that flows with different priorities match in the correct order.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.Packets are matched against flow entries based on prioritization. An entry that specifies an exact match (i.e., it has no wildcards) is always the highest priority", 
        "remarks": "", 
        "req": "Correct implementation of Matching priorities", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Data plane / Matching / Match priorities", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No20": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except Ingress Port and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "Ingress Port (uint16_t in_port)", 
        "number": "Grp50No20", 
        "purpose": "Matching against a flow with Ingress Port set, all other fields are wildcarded", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching ingress port", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Data plane / Matching Single Header Field/ Ingress Port (uint16_t in_port)", 
        "topo": "Control-plane connection between DUT and reference controller.At least three data plane connections to DUT."
    }, 
    "Grp50No200": {
        "method": "Configure and connect the Primary-controller on the DUT. Add two flows with different priorities and different TCP Ports set. Send a fragmented packet with TCP Ports matching the lower priority flow. Verify all packet fragments match the lower priority flow.", 
        "name": "Fragments wildcard TCP port", 
        "number": "Grp50No200", 
        "purpose": "Verifying that when matching on fragments the TCP ports are ignored.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.For IP packets with nonzero fragment offset or More Fragments bit set, the transport ports are set to zero for the lookup.", 
        "remarks": "", 
        "req": "Correct implementation of Matching Fragments", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching / Fragments wildcard TCP port", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No210": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except Ether Type being 0x806 and IP source address and netmask with action OFPAT_OUTPUT set to egress port. Send a packet matching the flow. Verify the packet gets forwarded only to the egress port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "IP source address of ARP packets(uint32_t nw_src)", 
        "number": "Grp50No210", 
        "purpose": "For ARP packets (Ethernet type equal to 0x0806), the lookup..................Page Break..................elds may also include the contained IP source and destination ..................Page Break..................fields(under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching IP source address of ARP packets.", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching Single Header Field/ IP source address of ARP packets(uint32_t nw_src)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No220": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except Ether Type being 0x806, IP destination address and netmask with action OFPAT_OUTPUT set to egress port. Send a packet matching the flow. Verify the packet gets forwarded only to the egress port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "IP destination address of ARP packets(uint32_t nw_src)", 
        "number": "Grp50No220", 
        "purpose": "For ARP packets (Ethernet type equal to 0x0806), the lookup..................Page Break..................fields may also include the contained IP source and destination ..................Page Break..................fields(under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching IP destination address of ARP packets.", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching Single Header Field/ IP destination address of ARP packets(uint32_t nw_src)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No30": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except Ethernet source address and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "Ethernet source address (dl_src[OFP_ETH_ALEN])", 
        "number": "Grp50No30", 
        "purpose": "Matching against a flow with Ethernet source address set, all other fields are wildcarded", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching Ethernet source address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "L2", 
        "title": "Data plane / Matching Single Header Field/ Ethernet source address (dl_src[OFP_ETH_ALEN])", 
        "topo": "Control-plane connection between DUT and reference controller.At least three data plane connections to DUT."
    }, 
    "Grp50No40": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except Ethernet destinationaddress and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "Ethernet destination address (dl_dst[OFP_ETH_ALEN])", 
        "number": "Grp50No40", 
        "purpose": "Matching against a flow with Ethernet destination address set, all other fields are wildcarded", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching Ethernet destination address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "L2", 
        "title": "Data plane / Matching Single Header Field/ Ethernet destination address (dl_dst[OFP_ETH_ALEN])", 
        "topo": "Control-plane connection between DUT and reference controller.At least three data plane connections to DUT."
    }, 
    "Grp50No50": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except Ethernet frame type and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "Ethernet frame type (uint16_t dl_type)", 
        "number": "Grp50No50", 
        "purpose": "Matching against a flow with Ethernet frame type set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "Notes: An OpenFlow switch is required to match the type in both standard Ethernet and 802.2 with a SNAP header and OUI of 0x000000. The special value of 0x05FF is used to match all 802.3 packets without SNAP headers.", 
        "req": "Correct implementation of Matching Ethernet frame type", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Data plane / Matching Single Header Field/ Ethernet frame type (uint16_t dl_type)", 
        "topo": "Control-plane connection between DUT and reference controller.At least three data plane connections on the DUT."
    }, 
    "Grp50No60": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except Input VLAN id and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "Input VLAN id (uint16_t dl_vlan)", 
        "number": "Grp50No60", 
        "purpose": "Matching against a flow with Input VLAN id set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "If the packet is a VLAN (Ethernet type 0x8100), the VLAN ID and PCP fields are used in the lookup.", 
        "req": "Correct implementation of Matching input VLAN id", 
        "results": "Pass or Fail or Not Tested", 
        "status": "L2", 
        "title": "Data plane / Matching Single Header Field/ Input VLAN id (uint16_t dl_vlan)", 
        "topo": "Control-plane connection between DUT and reference controller.At least three data plane connections to DUT."
    }, 
    "Grp50No70": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except Input VLAN priority and action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "Input VLAN priority (uint8_t dl_vlan_pcp)", 
        "number": "Grp50No70", 
        "purpose": "Matching against a flow with Input VLAN priority set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "If the packet is a VLAN (Ethernet type 0x8100), the VLAN ID and PCP fields are used in the lookup", 
        "req": "Correct implementation of Matching VLAN priority", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Matching Single Header Field/ Input VLAN priority (uint8_t dl_vlan_pcp)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No80a": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except IP source address and netmask with action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "IP source address Exact Match (uint32_t nw_src)", 
        "number": "Grp50No80", 
        "purpose": "Matching against a flow with IP source address and netmask set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching IP source address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "L3", 
        "title": "Data plane / Matching Single Header Field/ IP source address (uint32_t nw_src)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    },
    "Grp50No80b": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except IP source address and netmask with action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "IP source address Wildcard(uint32_t nw_src)", 
        "number": "Grp50No80", 
        "purpose": "Matching against a flow with wildcarded IP source address and netmask set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching IP source address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "L3", 
        "title": "Data plane / Matching Single Header Field/ IP source address (uint32_t nw_src)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    },
    "Grp50No80c": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except IP source address and netmask with action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "IP source address MSB bits(uint32_t nw_src)", 
        "number": "Grp50No80", 
        "purpose": "Matching against a flow with MSB bits of IP source address and netmask set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching IP source address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "L3", 
        "title": "Data plane / Matching Single Header Field/ IP source address (uint32_t nw_src)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No90a": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except IP destination address and netmask with action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "IP destination address Exact Match(uint32_t nw_dst)", 
        "number": "Grp50No90", 
        "purpose": "Matching against a flow with IP destination  address and netmask set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching IP destination address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "L3", 
        "title": "Data plane / Matching Single Header Field/ IP destination address (uint32_t nw_dst)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    },
    "Grp50No90b": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except IP destination address and netmask with action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "IP destination address wildcarded(uint32_t nw_dst)", 
        "number": "Grp50No90", 
        "purpose": "Matching against a flow with wildcard IP destination  address and netmask set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching IP destination address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "L3", 
        "title": "Data plane / Matching Single Header Field/ IP destination address (uint32_t nw_dst)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    }, 
    "Grp50No90c": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow with All header fields wildcarded except IP destination address and netmask with action OFPAT_OUTPUT set to second port. Send a packet matching the flow. Verify the packet gets forwarded only to the second port. Send a packet not matching the flow, verify a packet_in is generated, and the packet is not forwarded on the data plane.", 
        "name": "IP destination address MSB bits(uint32_t nw_dst)", 
        "number": "Grp50No90", 
        "purpose": "Matching against a flow with MSB bits of IP destination  address and netmask set, all other fields are wildcarded (under the constraints given in the specification as listed in OpenFlow Switch Specification 1.0.0 Table 3 on p. 4.).", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.4 Matching, p. 8.A packet matches a flow table entry if the values in the header fields used for the lookup (as defined above) match those defined in the flow table. If a flow table field has a value of ANY, it matches all possible values in the header", 
        "remarks": "", 
        "req": "Correct implementation of Matching IP destination address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "L3", 
        "title": "Data plane / Matching Single Header Field/ IP destination address (uint32_t nw_dst)", 
        "topo": "Control-plane connection between DUT and reference controller.At least Three data plane connections to DUT."
    },
    "Grp60No10": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow. Send N matching packets. Send OFPST_FLOW request. Verify reply packet_count counter is incremented correctly.", 
        "name": "Received Packets", 
        "number": "Grp60No10", 
        "purpose": "Verify that the packet_count counter in the Flow-stats reply increments in accordance with packets received.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per flow packet_count counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Flow / Received Packets", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to the DUT."
    }, 
    "Grp60No100": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow on each ingress port with the action set to output to the egress port. Send matching packets to each ingress port at a combined higher rate than the egress port supports. Send OFPST_PORT request for the egress port, and verify the reply contains the correct tx_dropped count.", 
        "name": "Transmit drop", 
        "number": "Grp60No100", 
        "purpose": "Verify that the tx_dropped counter in the Port_Stats reply increments in accordance with the packets dropped", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per port tx_dropped counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / Transmit drops", 
        "topo": "Control-plane connection between DUT and reference controller.One egress data plane connection to DUT.  At least one ingress data plane connection to DUT. Total ingress bandwidth must exceed total egress bandwidth."
    }, 
    "Grp60No110": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow. Send N matching packets containing errors (e.g. frame alignment or crc or overrun). Send OFPST_PORT request for the ingress port, and verify the reply contains the correct error count.", 
        "name": "Receive Errors", 
        "number": "Grp60No110", 
        "purpose": "Verify that the rx_errors counter in the Port_Stats reply increments in accordance with errors encountered while switch is receiving.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per port rx_errors counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / Receive Errors", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp60No120": {
        "method": "Configure and connect the Primary-controller on the DUT. Send OFPST_PORT request for the egress port, and verify the reply contains the correct transmit error count.", 
        "name": "Transmit Errors", 
        "number": "Grp60No120", 
        "purpose": "Verify that the tx_errors counter in the Port_Stats reply increments in accordance with errors encountered while switch is sending.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3; 5.3.5 Read State Messages, p. 30; struct ofp_port_stats p. 34uint64_t tx_errors;/* Number of transmit errors. This is a super-set of more specific transmit errors and should be greater than or equal to the sum of all tx_*_err values (none currently defined.) */", 
        "remarks": "Since no tx_*_err values are currently defined. Only the existence of the tx_error counter is verified.", 
        "req": "Correct implementation of per port tx_errors counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / Transmit Errors", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connections to DUT."
    }, 
    "Grp60No130": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow. Send matching packets containing frame alignment errors. Send OFPST_PORT request for the ingress port, and verify the reply contains the correct rx_frame_err count.", 
        "name": "Receive Frame Errors", 
        "number": "Grp60No130", 
        "purpose": "Verify that the rx_frame_err counter in the Port_Stats reply increments in accordance with errors the switch is receiving.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per port rx_frame_err counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / Receive Frame Errors", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp60No140": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger rx_over_err counter. Send OFPST_PORT request for the ingress port, and verify the reply contains the correct overrun count", 
        "name": "Receive Overrun Errors", 
        "number": "Grp60No140", 
        "purpose": "Verify that the rx_over_err counter in the Port_Stats reply increments in accordance with errors the switch is receiving.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "rx_over_err counters may not be reliably triggered. If unable to trigger the  rx_over_err counter, then the DUT will pass if  rx_over_err counter exists.", 
        "req": "Correct implementation of per port rx_over_err counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / Receive Overrun Errors", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp60No150": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow. Send N matching packets containing crc errors. Send OFPST_PORT request for the ingress port, and verify the reply contains the correct rx_crc_err count", 
        "name": "CRC Errors", 
        "number": "Grp60No150", 
        "purpose": "Verify that the rx_crc_err counter in the Port_Stats reply increments in accordance with crc errors the switch is receiving.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per port rx_crc_err counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / CRC Errors", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp60No160": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow in each direction. Send packets at a high rate to half-duplex ingress port. Generate collisions by sending packets at a high rate through DUT to half-duplex egress port. Send OFPST_PORT request for the half-duplex port, and verify the reply contains the correct collisions count", 
        "name": "collisions", 
        "number": "Grp60No160", 
        "purpose": "Verify that the collisions counter in the Port_Stats reply increments in accordance with collisions errors the switch is receiving.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per port collisions counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / Collisions", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connection to DUT. Set one data plane connection to half duplex."
    }, 
    "Grp60No170": {
        "method": "Configure and connect the Primary-controller on the DUT.  Configure a queue and map it to a port. Create a flow with action OFPAT_ENQUEUE and mapped to the queue. Send N matching packets. Send queue_stats request for the ingress port, and verify the reply contains the correct tx_packets count", 
        "name": "Transmit Packets", 
        "number": "Grp60No170", 
        "purpose": "Verify that the tx_packets counter in the Queue_Stats reply increments in accordance with packets transmitted from the queue.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per queue tx_packets counters", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Counters/ Per Queue / Transmit Packets", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp60No180": {
        "method": "Configure and connect the Primary-controller on the DUT.  Configure a queue and map it to a port. Create a flow with action OFPAT_ENQUEUE and mapped to the queue. Send N matching packets. Send queue_stats request for the ingress port and verify the reply contains the correct tx_bytes count", 
        "name": "Transmit bytes", 
        "number": "Grp60No180", 
        "purpose": "Verify that the tx_bytes counter in the Queue_Stats reply increments in accordance with bytes transmitted from the queue.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per queue tx_bytes counters", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Counters/ Per Queue / Transmit bytes", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp60No190": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow on each ingress port with the action set to output to the egress port. Map each flow to an egress port queue. Send matching packets to each ingress port at a combined higher rate than the egress port supports. Send queue_stats request for the egress port, and verify the reply contains the correct tx_errors count.", 
        "name": "Transmit Overrun Errors", 
        "number": "Grp60No190", 
        "purpose": "Verify that the tx_errors counter in the Queue_Stats reply increments in accordance with bytes transmitted from the queue.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per queue tx_errors counters", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Counters/ Per Queue / Transmit Overrun Errors", 
        "topo": "Control-plane connection between DUT and reference controller.One egress data plane connection to DUT.  At least one ingress data plane connection to DUT. Total ingress bandwidth must exceed total egress bandwidth."
    }, 
    "Grp60No20": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow. Send matching packets with N total bytes. Send OFPST_FLOW request. Verify reply byte_count counter is incremented correctly", 
        "name": "Received Bytes", 
        "number": "Grp60No20", 
        "purpose": "Verify that the byte_count counter in the Flow-stats reply increments in accordance with packets received.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "Some DUTs may count the FCS and others may not.", 
        "req": "Correct implementation of per flow byte_count counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Flow / Received Bytes", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp60No200": {
        "method": "Configure and connect the Primary-controller on the DUT. Create N flows with long idle timeout, Insert flows in the switch. Send Table_Stats request. Verify the reply contains the correct active_count value.", 
        "name": "Active Entries", 
        "number": "Grp60No200", 
        "purpose": "Verify that the active_count counter in the Table_Stats reply increments in accordance with the number of active flow entries in the table of the switch.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per table active_count counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Table / Active Entries", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp60No210": {
        "method": "Configure and connect the Primary-controller on the DUT. Insert a flow. Send N packets matching the flow and N\u2019 non-matching packets. Send OFPST_TABLE request. Verify lookup_count = N'+ N and matched_count= N.", 
        "name": "Packet Lookup & Matched Count", 
        "number": "Grp60No210", 
        "purpose": "Verify that lookup_count & matched_count counter in the Table_Stats reply increments in accordance with the number of packets looked up and the packets matched.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per table lookup_count and matched_count counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Table / Packet Lookup & Matched Count", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp60No30": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow. Send matching packets. Send multiple OFPST_FLOW requests within a certain time interval (e.g. 1 per 10sec for 60 sec). Verify  duration_sec counter is incremented correctly", 
        "name": "Duration (secs)", 
        "number": "Grp60No30", 
        "purpose": "Verify that the duration_sec counter in the Flow_stats reply increments in accordance with the time the flow has been alive", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per flow duration_sec counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Flow / Duration (secs)", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp60No40": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow. Send matching packets. Send OFPST_FLOW request within certain time intervals (e.g. 1 per 10sec for 60 sec). Verify duration_nsec counter is incremented correctly.", 
        "name": "Duration (nsecs)", 
        "number": "Grp60No40", 
        "purpose": "Verify that the duration_nsec counter in the Flow_stats reply increments in accordance with the time the flow has been alive", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per flow duration_nsec counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Flow / Duration (nsecs)", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp60No50": {
        "method": "Configure and connect the Primary-controller on the DUT. Send OFPST_PORT request for ingress port . Note current rx_packets value. Add a flow. Send N matching packets to ingress port. Send OFPST_PORT request for ingress port, and verify the reply contains the correct rx_packets count (i.e. previous rx_packets count + N)", 
        "name": "Received Packets", 
        "number": "Grp60No50", 
        "purpose": "Verify that the rx_packets counter in the Port_Stats reply increments in accordance with the packets received", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per port rx_packets counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / Received Packets", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp60No60": {
        "method": "Configure and connect the Primary-controller on the DUT. Send OFPST_PORT stats request for egress port. Note current tx_packets value. Add a flow with output action to an egress port. Send N matching packets. Send OFPST_PORT request for the egress port, and verify the reply contains the correct tx_packets count (i.e previous tx_packets counter + N)", 
        "name": "Transmitted Packets", 
        "number": "Grp60No60", 
        "purpose": "Verify that the tx_packets counter in the Port_Stats reply increments in accordance with the packets transmitted", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per port tx_packets counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / Transmitted Packets", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp60No70": {
        "method": "Configure and connect the Primary-controller on the DUT. Send OFPST_PORT request for ingress port. Note the current rx_bytes value. Add a flow. Send N matching packets to ingress port. Send OFPST_PORT request for the ingress port. Verify the reply contains the correct rx_bytes count (i.e previous rx_bytes + N *(No. of bytes in each packet))", 
        "name": "Received bytes", 
        "number": "Grp60No70", 
        "purpose": "Verify that the rx_bytes counter in the Port_Stats reply increments in accordance with the bytes received", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of per port rx_bytes counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / Received bytes", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp60No80": {
        "method": "Configure and connect the Primary-controller on the DUT. Send OFPST PORT stats request fot egress port. Add a flow with output action to egress port, send N matching packets. Send OFPST_PORT request for the egress port, and verify the reply contains the correct transmitted bytes count i.e previous tx_bytes counter + N*(No. of bytes in a packet )", 
        "name": "Transmitted bytes", 
        "number": "Grp60No80", 
        "purpose": "Verify that the tx_bytes counter in the Port_Stats reply increments in accordance with the packets transmitted", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "", 
        "req": "Correct implementation of Counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / Transmitted bytes", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections."
    }, 
    "Grp60No90": {
        "method": "Configure and connect the Primary-controller on the DUT. Add a flow. Trigger rx_dropped counter. Send OFPST_PORT request for the ingress port, and verify the reply contains the correct rx_dropped count", 
        "name": "Receive drops", 
        "number": "Grp60No90", 
        "purpose": "Verify that the rx_dropped counter in the Port_Stats reply increments in accordance with the packets dropped", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.2 Counters, p. 3, 5.3.5 Read State Messages, p. 30", 
        "remarks": "rx_dropped counters may not be reliably triggered. If unable to trigger the rx_dropped counter, then the DUT will pass if rx_dropped counter exists.", 
        "req": "Correct implementation of per port rx_dropped counters", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Counters/ Per Port / Receive drops", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp70No10": {
        "method": "Configure and connect the Primary-controller on the DUT. Create flow without action and/or create flows with actions but no forward action. Send packets matching the flow. Verify packets are dropped and flow counters are incremented.", 
        "name": "No action drops packet", 
        "number": "Grp70No10", 
        "purpose": "Verify that flows without a forward action drop matching packets", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 3.Required Action: Drop. A flow-entry with no specified action indicates that all matching packets should be dropped.", 
        "remarks": "", 
        "req": "Correct implementation of drop action", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Data plane / Actions / No action drops packet", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No100": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_OUTPUT to multiple egress ports. Leave at least one egress port out of the action list. Send matching packet to ingress port. Verify packet is output on all egress ports of the action list but not the ports left out of the action list.", 
        "name": "Forward: Multiple Ports", 
        "number": "Grp70No100", 
        "purpose": "Verify implementation of the Forward:MULTIPLEPORTS function", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 3.The controller will only ask the switch to send to multiple physical ports simultaneously if the switch indicates it supports this behavior in the initial handshake (see section 5.3.1).", 
        "remarks": "", 
        "req": "Correct implementation of action Forward:MULTIPLEPORTS", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Actions / Forward:MULTIPLEPORTS", 
        "topo": "Control-plane connection between DUT and reference controller.At least four data plane connections to DUT."
    }, 
    "Grp70No110": {
        "method": "Configure and connect the Primary-controller on the DUT. Configure a queue and map it to a port. Create a flow with action OFPAT_ENQUEUE and mapped to the queue. Send matching packet. Verify packet gets forwarded through the queue specified in the flow.", 
        "name": "Forward: Enqueue", 
        "number": "Grp70No110", 
        "purpose": "Verify implementation of the Forward: ENQUEUE", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 3.OPTIONAL Action: Enqueue. The enqueue action forwards a packet through a queue attached to a port. Forwarding behavior is dictated by the configuration of the queue and is used to provide basic Quality-of-Service (QoS) support (see section 5.2.2).", 
        "remarks": "", 
        "req": "Correct implementation of action Forward:ENQUEUE", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Actions / Forward:ENQUEUE", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No120": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_SET_VLAN_VID and output to an egress port. Send matching untagged packet to the ingress port. Verify packet gets output to the egress port with correct VLAN Tag added.", 
        "name": "Add VLAN ID", 
        "number": "Grp70No120", 
        "purpose": "Verify implementation of the Set VLAN ID action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.If no VLAN is present, a new header is added with the specified VLAN ID and priority of zero", 
        "remarks": "", 
        "req": "Correct implementation of Action:Set VLAN ID", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Add VLAN ID", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No130": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_SET_VLAN_VID and output to an egress port. Send matching packet tagged with random VLAN ID to ingress port. Verify packet gets output with correct VLAN Tag as specified in the flow.", 
        "name": "Set VLAN ID", 
        "number": "Grp70No130", 
        "purpose": "Verify implementation of the Set VLAN ID action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.If a VLAN header already exists, the VLAN ID is replaced with the specified value", 
        "remarks": "", 
        "req": "Correct implementation of Action: Set VLAN ID", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Set VLAN ID", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No140": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_SET_VLAN_PCP and output to an egress port. Send matching tagged packet to the ingress port. Verify packet is output to the egress port with the correct VLAN Tag and priority specified in the flow.", 
        "name": "Add VLAN priority", 
        "number": "Grp70No140", 
        "purpose": "Verify implementation of the Set VLAN priority action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.If no VLAN is present, a new header is added with the specified priority and a VLAN ID of zero", 
        "remarks": "", 
        "req": "Correct implementation of Action: Set VLAN priority", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Add VLAN priority", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No150": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action  OFPAT_SET_VLAN_PCP and output to an egress port. Send matching packet tagged with random VLAN priority to ingress port. Verify packet gets output with the correct VLAN priority set.", 
        "name": "Set VLAN priority", 
        "number": "Grp70No150", 
        "purpose": "Verify implementation of the Set VLAN priority action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.If a VLAN header already exists, the priority field is replaced with the specified value", 
        "remarks": "", 
        "req": "Correct implementation of action Set VLAN priority", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Set VLAN priority", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No160": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_STRIP_VLAN and output to an egress port. Send matching VLAN tagged packet to ingress port. Verify packet gets output to the egress port without a VLAN tag.", 
        "name": "Strip VLAN header", 
        "number": "Grp70No160", 
        "purpose": "Verify implementation of the Strip VLAN header action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.Strip VLAN header if it exists", 
        "remarks": "", 
        "req": "Correct implementation of action Strip VLAN header", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Strip VLAN header", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No170": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_SET_DL_SRC address and output to an egress port. Send matching packet to ingress port. Verify packet gets output to the egress port with the correct Ethernet source MAC address as specified in the flow.", 
        "name": "Modify Ethernet source MAC address", 
        "number": "Grp70No170", 
        "purpose": "Verify implementation of the Modify Ethernet source MAC address action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.", 
        "remarks": "", 
        "req": "Correct implementation of action Modify Ethernet source MAC address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Modify Ethernet source MAC address", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No180": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with OFPAT_SET_DL_DST and output to an egress port. Send matching packet to ingress port. Verify packet gets output to the egress port with the correct Ethernet destination MAC address as specified in the flow.", 
        "name": "Modify Ethernet destination MAC address", 
        "number": "Grp70No180", 
        "purpose": "Verify implementation of the Modify Ethernet destination MAC address action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.", 
        "remarks": "", 
        "req": "Correct implementation of action Modify Ethernet destination MAC address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Modify Ethernet destination MAC address", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No190": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_SET_NW_SRC and output to an egress port. Send matching packet to ingress port. Verify packet gets output to the egress port with the correct IPv4 source address as specified in the flow.", 
        "name": "Modify IPv4 source address", 
        "number": "Grp70No190", 
        "purpose": "Verify implementation of the Modify IPv4 source address action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.Replace the existing IP source address with new value and update the IP checksum (and TCP/UDP checksum if applicable). This action is only applicable to IPv4 packets", 
        "remarks": "", 
        "req": "Correct implementation of action Modify IPv4 source address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Modify IPv4 source address", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No20": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST message. Parse the OFPT_FEATURES_REPLY and verify correct announcement of the supported actions.", 
        "name": "Get supported actions", 
        "number": "Grp70No20", 
        "purpose": "Get the supported actions from switch and make sanity checks", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 3.A switch is not required to support all action types \u2014 just those marked \u201cRequired Actions\u201d below. When connecting to the controller, a switch indicates which of the \u201cOPTIONAL Actions\u201d it supports. OpenFlow enabled switches, routers, and access points may also support the NORMAL action", 
        "remarks": "", 
        "req": "Correct implementation of supported actions announcement", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Data plane / Actions / Get supported actions", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp70No200": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_SET_NW_DST and output to an egress port. Send matching packet to ingress port. Verify packet gets output to egress port with correct IPv4 destination address as specified in the flow.", 
        "name": "Modify IPv4 destination address", 
        "number": "Grp70No200", 
        "purpose": "Verify implementation of the Modify IPv4 destination address action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.Replace the existing IP destination address with new value and update the IP checksum (and TCP/UDP checksum if applicable). This action is only applicable to IPv4 packets", 
        "remarks": "", 
        "req": "Correct implementation of action Modify IPv4 destination address", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Modify IPv4 destination address", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No210": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_SET_NW_TOS bits and output egress port. Send matching packet to ingress port. Verify packet gets output to the egress port with correct IPv4 ToS bits as specified in the flow.", 
        "name": "Modify IPv4 ToS bits", 
        "number": "Grp70No210", 
        "purpose": "Verify implementation of the Modify IPv4 ToS bits action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.Replace the existing IP ToS field. This action is only applied to IPv4 packets.", 
        "remarks": "", 
        "req": "Correct implementation of action Modify IPv4 ToS bits", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Modify IPv4 ToS bits", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No220": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_SET_TP_SRC and output to an egress port. Send matching packet to ingress port. Verify packet gets output to egress port with correct TCP/UDP source port as specified in the flow.", 
        "name": "Modify TCP/UDP source port", 
        "number": "Grp70No220", 
        "purpose": "Verify implementation of the Modify TCP/UDP source port action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.Replace the existing TCP/UDP source port with new value and update the TCP/UDP checksum. This action is only applicable to TCP and UDP packets", 
        "remarks": "", 
        "req": "Correct implementation of action Modify TCP/UDP source port", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Modify TCP/UDP source port", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No230": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_SET_TP_DST and output to an egress port. Send matching packet to ingress port. Verify packet gets output to the egress port with correct TCP/UDP destination port as specified in the flow.", 
        "name": "Modify TCP/UDP destination port", 
        "number": "Grp70No230", 
        "purpose": "Verify implementation of the Modify TCP/UDP destination port action", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.Replace the existing TCP/UDP destination port with new value and update the TCP/UDP checksum. This action is only applicable to TCP and UDP packets", 
        "remarks": "", 
        "req": "Correct implementation of action Modify TCP/UDP destination port", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Modify-Field Actions / Modify TCP/UDP destination port", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane connections to DUT."
    }, 
    "Grp70No240": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPAT_OUTPUT followed by action OFPAT_SET_TP_SRC. Verify the correct error is returned.", 
        "name": "Ordering not possible", 
        "number": "Grp70No240", 
        "purpose": "Verify implementation of action lists", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification messages, p. 13.If a switch cannot process the action list for any flow mod message in the order specified, it MUST immediately return an OFPET_FLOW_MOD_FAILED : OFPFMFC_UNSUPPORTED error and reject the flow", 
        "remarks": "", 
        "req": "Correct implementation of action ordering", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Actions / Ordering not possible", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp70No250": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with two OFPAT_SET_VLAN_VID actions (set to two different VLAN IDs) followed by two OFPAT_OUTPUT actions (set to two different egress ports). Send matching packet to ingress port. Verify the packets sent out both egress ports contain the second VLAN ID.", 
        "name": "Sequential execution", 
        "number": "Grp70No250", 
        "purpose": "Verify correct execution of sequential actions", 
        "ref": "OpenFlow Switch Specification 1.0.0, 4.6 Flow Table Modification messages, p. 13.Action lists for inserted flow entries MUST be processed in the order specified. However, there is no packet output ordering guaranteed within a port. For example, an action list may result in two packets sent to two different VLANs on a single port. These two packets may be arbitrarily re-ordered, but the packet bodies must match those generated from a sequential execution of the actions", 
        "remarks": "", 
        "req": "Correct implementation of sequential execution", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Actions / Sequential execution", 
        "topo": "Control-plane connection between DUT and reference controller.At least two data plane ports connections to DUT."
    }, 
    "Grp70No30": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action Forward:ALL .Send matching packet to ingress port. Verify all (or a meaningful subset of) ports receive the packet. Verify the ingress port does not receive the packet.", 
        "name": "Forward: All", 
        "number": "Grp70No30", 
        "purpose": "Verify implementation of the Forward: ALL function", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 3.ALL: Send the packet out all interfaces, not including the incoming interface", 
        "remarks": "", 
        "req": "Correct implementation of Action FORWARD:ALL", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Data plane / Actions / Forward:ALL", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp70No40": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action Forward:Controller. Send matching packet. Verify Controller receives OFPT_PACKET_IN message.", 
        "name": "Forward: Controller", 
        "number": "Grp70No40", 
        "purpose": "Verify implementation of the Forward: CONTROLLER function", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 3.CONTROLLER: Encapsulate and send the packet to the controller", 
        "remarks": "", 
        "req": "Correct implementation of action Forward:Controller", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Data plane / Actions / Forward:CONTROLLER", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp70No50": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action Forward:LOCAL. Send matching packet. Send OFPST_TABLE request. Verify matched_count increases accordingly.", 
        "name": "Forward: Local", 
        "number": "Grp70No50", 
        "purpose": "Verify implementation of the Forward:LOCAL function", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 3.LOCAL: Send the packet to the switch\u2019s local networking stack", 
        "remarks": "The behavior of the IP Stack is not defined enough to currently check it directly with a testcase.", 
        "req": "Correct implementation of action Forward:LOCAL", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Actions / Forward:Local", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp70No60": {
        "method": "Configure and connect the Primary-controller on the DUT. Create an OFPT_PACKET_OUT message with action OFPP_TABLE. Create matching flow with an output action to an egress port. Send packet_out message. Verify packet hits flow in table and gets output at the egress port.", 
        "name": "Forward: Table", 
        "number": "Grp70No60", 
        "purpose": "Verify implementation of the Forward:TABLE function", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 3.TABLE: Perform actions in flow table. Only for packet-out messages", 
        "remarks": "", 
        "req": "Correct implementation of action Forward:Table", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Data plane / Actions / Forward:TABLE", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp70No70": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPP_IN_PORT. Send matching packet on ingress port. Verify packet is output on the ingress port.", 
        "name": "Forward: Inport", 
        "number": "Grp70No70", 
        "purpose": "Verify implementation of the Forward: INPORT function", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 3.INPORT: Send the packet out the input port", 
        "remarks": "", 
        "req": "Correct implementation of action Forward:INPORT", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Data plane / Actions / Forward:INPORT", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp70No80": {
        "method": "Configure and connect the Primary-controller on the DUT. Create a flow with action OFPP_NORMAL. Send matching packet.  Send OFPST_TABLE request. Verify matched_count increases accordingly", 
        "name": "Forward: Normal", 
        "number": "Grp70No80", 
        "purpose": "Verify implementation of the Forward: NORMAL function", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 6.NORMAL: Process the packet using the traditional forwarding path supported by the switch (i.e. traditional L2, VLAN, and L3 processing).The switch may check the VLAN field to determine whether or not to forward the packet along the normal processing route. If the switch cannot forward entries for the OpenFlow-specific VLAN back to the normal processing route, it must indicate that it does not support this action.", 
        "remarks": "Normal behavior is not specified, so we cannot check the behavior directly.", 
        "req": "Correct implementation of action Forward: NORMAL", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Actions / Forward: NORMAL", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp70No90": {
        "method": "Configure and connect the Primary-controller on the DUT. Configure one data plane egress port as part of the flood group. Configure a second data plane egress port that is not a member of the flood group. Create a flow with action OFPP_FLOOD. Send matching packet to ingress port. Verify packet is output on the flood group member port, but not the non-member port or the ingress port.", 
        "name": "Forward: Flood", 
        "number": "Grp70No90", 
        "purpose": "Verify implementation of the Forward:FLOOD function", 
        "ref": "OpenFlow Switch Specification 1.0.0, 3.3 Actions, p. 3.Flood the packet along the minimum spanning tree, not including the incoming interface.", 
        "remarks": "", 
        "req": "Correct implementation of action Forward:FLOOD", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Data plane / Actions / Forward:FLOOD", 
        "topo": "Control-plane connection between DUT and reference controller.At least three data plane connections to DUT."
    }, 
    "Grp80No10": {
        "method": "Configure and connect the Primary-controller on the DUT. Send OFPT_HELLO message with empty body. Verify device accepts the message without generating an error.", 
        "name": "OFPT_HELLO without body", 
        "number": "Grp80No10", 
        "purpose": "Verify OFPT_HELLO without body is accepted by the device", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.5.1 Hello , p. 41.The OFPT_HELLO message has no body; that is, it consists only of an OpenFlow header. Implementations must be prepared to receive a hello message that includes a body, ignoring its contents, to allow for later extensions", 
        "remarks": "", 
        "req": "Correct implementation of Hello messages", 
        "results": "Pass or Fail Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Symmetric messages/ OFPT_HELLO without body", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No100": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Verify reply contains a valid uint8_t n_tables value", 
        "name": "uint8_t n_tables", 
        "number": "Grp80No100", 
        "purpose": "Verify OFPT_FEATURES_REPLY contains valid uint8_t n_tables field", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.The n_tables field describes the number of tables supported by the switch,each of which can have a diferent set of supported wildcard bits and number of entries. When the controller and switch rst communicate, the controller will find out how many tables the switch supports from the Features Reply. If it wishes to understand the size, types, and order in which tables are consulted, the controller sends a OFPST_TABLE stats request. A switch must return these tables in the order the packets traverse the tables, with all exact-match tables listed before all tables with wildcards", 
        "remarks": "", 
        "req": "Correct implementation of uint8_t n_tables", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages/ uint8_t n_tables", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No110": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Check whether the OFPC_FLOW_STATS bit is set. If yes, Flow statistics are supported.", 
        "name": "OFPC_FLOW_STATS", 
        "number": "Grp80No110", 
        "purpose": "Verify OFPT_FEATURES_REPLY for Flow statistics support", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_FLOW_STATS", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPC_FLOW_STATS", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No120": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Check whether the OFPC_TABLE_STATS bit is set. If yes, Table statistics are supported.", 
        "name": "OFPC_TABLE_STATS", 
        "number": "Grp80No120", 
        "purpose": "Verify OFPT_FEATURES_REPLY for Table statistics support", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_TABLE_STATS", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPC_TABLE_STATS", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No130": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Check whether the OFPC_PORT_STATS bit is set. If yes, Port statistics are supported.", 
        "name": "OFPC_PORT_STATS", 
        "number": "Grp80No130", 
        "purpose": "Verify OFPT_FEATURES_REPLY for Port statistics support", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_PORT_STATS", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPC_PORT_STATS", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No140": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Check whether the OFPC_STP bit is set. If yes, 802.1d spanning tree is supported.", 
        "name": "OFPC_STP", 
        "number": "Grp80No140", 
        "purpose": "Verify OFPT_FEATURES_REPLY for 802.1d spanning tree support", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_STP", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPC_STP", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No150": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Verify OFPC_RESERVED is 0.", 
        "name": "OFPC_RESERVED", 
        "number": "Grp80No150", 
        "purpose": "Verify OFPT_FEATURES_REPLY for OFPC_RESERVED returns 0", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.OFPC_RESERVED = 1 <4, /* Reserved, must be zero.", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_RESERVED", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPC_RESERVED", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No160": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Check whether the OFPC_IP_REASM bit is set. If yes, Switch can reassemble IP fragments.", 
        "name": "OFPC_IP_REASM", 
        "number": "Grp80No160", 
        "purpose": "Verify OFPT_FEATURES_REPLY for IP packet reassembly", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_IP_REASM", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPC_IP_REASM", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No170": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Check whether the OFPC_ARP_MATCH_IP bit is set. If yes, the Switch supports matching IP addresses in ARP packets.", 
        "name": "OFPC_ARP_MATCH_IP", 
        "number": "Grp80No170", 
        "purpose": "Verify OFPT_FEATURES_REPLY for Match IP addresses in ARP packets.", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_ARP_MATCH_IP", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPC_ARP_MATCH_IP", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No180": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Check the bitmap of supported ofp_action_types, and create a list of supported actions. The switch MUST support the announced actions.", 
        "name": "uint32_t actions", 
        "number": "Grp80No180", 
        "purpose": "Verify OFPT_FEATURES_REPLY for Bitmap of supported ofp_action_types", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.", 
        "remarks": "", 
        "req": "Correct implementation of uint32_t actions", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / uint32_t actions", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No190": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Check the ofp_phy_port ports[0] and compare the returned list of available ports with the switch configuration to verify consistency.", 
        "name": "struct ofp_phy_port ports[0]", 
        "number": "Grp80No190", 
        "purpose": "Verify OFPT_FEATURES_REPLY for list of available ports", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.", 
        "remarks": "", 
        "req": "Correct implementation of ofp_phy_port ports[0]", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / struct ofp_phy_port ports[0]", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No20": {
        "method": "Configure and connect the Primary-controller on the DUT. Send Hello message with body. Verify device accepts the message without generating an error.", 
        "name": "OFPT_HELLO with body", 
        "number": "Grp80No20", 
        "purpose": "Verify OFPT_HELLO with body is accepted by the device", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.5.1 Hello, p. 41.The OFPT_HELLO message has no body; that is, it consists only of an OpenFlow header. Implementations must be prepared to receive a hello message that includes a body, ignoring its contents, to allow for later extensions.", 
        "remarks": "", 
        "req": "Correct implementation of Hello messages", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Symmetric messages/ OFPT_HELLO with body", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No200": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_GET_CONFIG_REQUEST, and verify  OFPT_GET_CONFIG_REPLY  is received. Verify reply has the expected fields (OFPC_FRAG_NORMAL, OFPC_FRAG_DROP, OFPC_FRAG_REASM, OFPC_FRAG_MASK).", 
        "name": "Get Config Request-Reply", 
        "number": "Grp80No200", 
        "purpose": "Verify implementation of Get Config Request-Reply", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.2 Switch configuration messages, p. 26.The controller is able to set and query configuration parameters in the switch with the OFPT_SET_CONFIG and OFPT_GET_CONFIG_REQUEST messages, respectively. The switch responds to a configuration request with an OFPT_GET_CONFIG_REPLY message; it does not reply to a request to set the configuration. There is no body for OFPT_GET_CONFIG_REQUEST beyond the OpenFlow header", 
        "remarks": "Values of the fields will be checked in the following test cases", 
        "req": "Correct implementation of Get Config Request-Reply", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / Get Config Request-Reply", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No210": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY is received from the switch with the same XID. Verify OFPC_FRAG_NORMAL flag value and verify handling of fragments is consistent with the returned configuration.", 
        "name": "OFPC_FRAG_NORMAL", 
        "number": "Grp80No210", 
        "purpose": "Check OFPT_GET_CONFIG_REPLY value for No special handling for fragments", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.2 Switch configuration messages, p. 26", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_FRAG_NORMAL", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPC_FRAG_NORMAL", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No220": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY  is received from the switch with the same XID. Verify OFPC_FRAG_DROP flag value and verify handling of fragments is consistent with the returned configuration.", 
        "name": "OFPC_FRAG_DROP", 
        "number": "Grp80No220", 
        "purpose": "Check OFPT_GET_CONFIG_REPLY value for Drop fragments", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.2 Switch configuration messages, p. 26", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_FRAG_DROP", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPC_FRAG_DROP", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No230": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY is received from the switch with the same XID. Verify OFPC_FRAG_REASM flag value and verify handling of fragments is consistent with the returned configuration.", 
        "name": "OFPC_FRAG_REASM", 
        "number": "Grp80No230", 
        "purpose": "Check OFPT_GET_CONFIG_REPLY value for Reassemble fragments", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.2 Switch configuration messages, p. 26", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_FRAG_REASM", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPC_FRAG_REASM", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No240": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY is received from the switch with the same XID. Verify OFPC_FRAG_MASK flag value and verify handling of fragments is consistent with the returned configuration.", 
        "name": "OFPC_FRAG_MASK", 
        "number": "Grp80No240", 
        "purpose": "Check OFPT_GET_CONFIG_REPLY value for OFPC_FRAG_MASK", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.2 Switch configuration messages, p. 26", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_FRAG_MASK", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPC_FRAG_MASK", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No250": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY  is received from the switch with the same XID. Document  miss_send_len value. Send a packet .Verify  data length in  ofp_packet_in message is in accordance with miss_send_len value. If miss_send_len is 0 bytes, data length in ofp_packet_in is 0 bytes. If miss_send_len  is x bytes (x>0) , then data length in ofp_packet_in is >= x bytes.", 
        "name": "uint16_t miss_send_len", 
        "number": "Grp80No250", 
        "purpose": "Check OFPT_GET_CONFIG_REPLY value for miss_send_len", 
        "ref": "OpenFlow Switch Specification 11.0.0, 5.3.2 Switch configuration messages, p. 26.The miss_send_len field defines the number of bytes of each packet sent to the controller as a result of both Flow table misses and Flow table hits with the controller as the destination. If this field equals 0, the switch must send a zero-size packet_in message.5.4.1 Packet-In Message p.36.If the packet is sent because of a flow table miss, then at least miss_send_len bytes from the OFPT_SET_CONFIG message are sent. The default miss_send_len is 128 bytes. If the packet is not buffered,the entire packet is included in the data portion, and the buffer_id is -1", 
        "remarks": "If the packet is not buffered  the entire packet is included in the data portion, and the buffer_id is -1", 
        "req": "Correct implementation of miss_send_len", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / uint16_t miss_send_len", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No260": {
        "method": "Configure and connect the Primary-controller on the DUT.  Generate an OFPT_GET_CONFIG_REQUEST and verify reply is received. Verify the value in miss_send_len field (defines number of bytes of each packet sent to the controller). Generate OFPT_SET_CONFIG request. Overwrite the miss_send_len field.  Again send an OFPT_GET_CONFIG_REQUEST and verify the change has taken effect.", 
        "name": "OFPT_SET_CONFIG \u2013 miss_send_len", 
        "number": "Grp80No260", 
        "purpose": "Verify implementation of OFPT_SET_CONFIG \u2013 miss_send_len", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.2 Switch configuration messages, p. 26.The miss_send_len field defines the number of bytes of each packet sent to the controller as a result of both Flow table misses and Flow table hits with the controller as the destination. If this field equals 0, the switch must send a zero-size packet_in message.5.4.1 Packet-In Message p.36.If the packet is sent because of a flow table miss, then at least miss_send_len bytes from the OFPT_SET_CONFIG message are sent. The default miss_send_len is 128 bytes. If the packet is not buffered,the entire packet is included in the data portion, and the buffer_id is -1", 
        "remarks": "", 
        "req": "Correct implementation of miss_send_len", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPT_SET_CONFIG \u2013 miss_send_len", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No270": {
        "method": "Configure and connect the Primary-controller on the DUT.Generate a OFPT_GET_CONFIG_REQUEST and verify reply is received. Generate OFPT_SET_CONFIG_REQUEST. Set OFPC_FRAG_NORMAL = 0. Send an OFPT_GET_CONFIG request and verify the value is 0.", 
        "name": "OFPT_SET_CONFIG \u2013 OFPC_FRAG_NORMAL = 0", 
        "number": "Grp80No270", 
        "purpose": "Verify implementation of OFPT_SET_CONFIG \u2013 OFPC_FRAG_NORMAL", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.2 Switch Configuration, p. 26.The OFPC_FRAG_* flags indicate whether IP fragments should be treated normally,dropped, or reassembled. \u201cNormal\" handling of fragments means that an attempt should be made to pass the fragments through the OpenFlow tables. If any field is not present (e.g., the TCP/UDP ports didn't fit), then the packetshould not match any entry that has that field set.", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_FRAG_NORMAL", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPT_SET_CONFIG \u2013 OFPC_FRAG_NORMAL", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No280": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_GET_CONFIG_REQUEST and verify reply is received. Generate OFPT_SET_CONFIG request. Set OFPC_FRAG_REASM = 1 Send an OFPT_GET_CONFIG request and verify the change has taken effect.", 
        "name": "OFPT_SET_CONFIG \u2013 OFPC_FRAG_REASM", 
        "number": "Grp80No280", 
        "purpose": "Verify implementation of OFPT_SET_CONFIG \u2013 OFPC_FRAG_REASM", 
        "ref": "OpenFlow 1.0.0, 5.3.2 Switch configuration messages, p. 26.", 
        "remarks": "Value changes from 0 (set in test case 80.270) to 1.", 
        "req": "Correct implementation of OFPC_FRAG_REASM", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages / OFPT_SET_CONFIG \u2013 OFPC_FRAG_REASM", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No290": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_GET_CONFIG_REQUEST and verify OFPT_GET_CONFIG_REPLY is received. Generate OFPT_SET_CONFIG_REQUEST and set OFPC_FRAG_REASM = 2. Send the OFPT_GET_CONFIG_REQUEST and verify the value is 2.", 
        "name": "OFPT_SET_CONFIG \u2013 OFPC_FRAG_REASM", 
        "number": "Grp80No290", 
        "purpose": "Verify implementation of OFPT_SET_CONFIG \u2013 OFPC_FRAG_REASM", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.2 Switch configuration messages, p. 26", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_FRAG_REASM", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Protocol Messages / Switch configuration messages / OFPT_SET_CONFIG \u2013 OFPC_FRAG_REASM", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No30": {
        "method": "Configure and connect the Primary-controller on the DUT. Trigger a basic OFPT_ERROR message One way to trigger this error is to send an incompatible version in the OFPT_HELLO and verify OFPET_HELLO_FAILED error type is returned.", 
        "name": "OFPT_ERROR", 
        "number": "Grp80No30", 
        "purpose": "Verify basic error message type is implemented", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.4, Error Message, p. 38.", 
        "remarks": "", 
        "req": "Correct implementation of error messages", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Symmetric messages/ OFPT_ERROR", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No300": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_GET_CONFIG_REQUEST and verify reply is received. Generate OFPT_SET_CONFIG request and set OFPC_FRAG_MASK = 3. Send the OFPT_GET_CONFIG_REQUEST and verify the value is 3.", 
        "name": "OFPT_SET_CONFIG \u2013 OFPC_FRAG_MASK = 3", 
        "number": "Grp80No300", 
        "purpose": "Verify implementation of OFPT_SET_CONFIG \u2013 OFPC_FRAG_MASK = 3", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.2 Switch configuration messages, p. 26", 
        "remarks": "", 
        "req": "Correct implementation of OFPC_FRAG_MASK", 
        "results": "Pass or Fail or Not Tested", 
        "status": "", 
        "title": "Protocol Messages / Switch configuration messages / OFPT_SET_CONFIG \u2013 OFPC_FRAG_MASK", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No40": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate OFPT_ECHO_REQUEST without body, and verify  OFPT_ECHO_REPLY is returned.", 
        "name": "OFPT_ECHO_REQUEST / Reply without body", 
        "number": "Grp80No40", 
        "purpose": "Verify OFPT_ECHO_REQUEST / Reply", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.5.1 Echo, p. 41.An Echo Request message consists of an OpenFlow header plus an arbitrary length data field. The data field might be a message timestamp to check latency, various lengths to measure bandwidth, or zero-size to verify liveness between the switch and controller", 
        "remarks": "", 
        "req": "Correct implementation of Echo Request / Reply messages", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Symmetric messages/ OFPT_ECHO_REQUEST / Reply without body", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No50": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate OFPT_ECHO_REQUEST with arbitrary data field and verify the Reply has the identical data field.", 
        "name": "OFPT_ECHO_REQUEST / Reply with body", 
        "number": "Grp80No50", 
        "purpose": "Verify OFPT_ECHO_REQUEST / Reply", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.5.2 Echo, p. 41.An Echo Request message consists of an OpenFlow header plus an arbitrary length data field. The data field might be a message timestamp to check latency, various lengths to measure bandwidth, or zero-size to verify liveness between the switch and controller", 
        "remarks": "", 
        "req": "Correct implementation of Echo Request / Reply messages", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Symmetric messages/ OFPT_ECHO_REQUEST / Reply with body", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No60": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY is received from the switch with the same XID.", 
        "name": "Features Request-Reply", 
        "number": "Grp80No60", 
        "purpose": "Verify OFPT_FEATURES_REQUEST / Reply dialogue", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.Upon TLS session establishment, the controller sends an OFPT_FEATURES_REQUEST message. This message does not contain a body beyond the OpenFlow header. The switch responds with an OFPT_FEATURES_REPLY message", 
        "remarks": "", 
        "req": "Correct implementation of Features Request and Reply messages", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages/ Features Request-Reply", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No70": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Verify reply has all the expected switch features information.", 
        "name": "Features Reply", 
        "number": "Grp80No70", 
        "purpose": "Verify OFPT_FEATURES_REPLY contains complete feature information", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.Upon TLS session establishment, the controller sends an OFPT_FEATURES_REQUEST message. This message does not contain a body beyond the OpenFlow header. The switch responds with an OFPT_FEATURES_REPLY message", 
        "remarks": "The returned values will be checked in the following test cases.", 
        "req": "Correct implementation of Features Reply message", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages/ Features Reply", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No80": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the  OFPT_FEATURES_REPLY   is received from the switch with the same XID. Verify reply has a valid datapath_id field", 
        "name": "uint64_t datapath_id", 
        "number": "Grp80No80", 
        "purpose": "Verify OFPT_FEATURES_REPLY contains valid datapath_id field", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.The datapath_id field uniquely identifies a datapath. The lower 48 bits are intended for the switch MAC address, while the top 16 bits are up to the implementer. An example use of the top 16 bits would be a VLAN ID to distinguish multiple virtual switch instances on a single physical switch. This eld should be treated as an opaque bit string by controllers", 
        "remarks": "", 
        "req": "Correct implementation of datapath_id field", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages/ uint64_t datapath_id", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp80No90": {
        "method": "Configure and connect the Primary-controller on the DUT. Generate an OFPT_FEATURES_REQUEST. Verify the OFPT_FEATURES_REPLY   is received from the switch with the same XID. Verify reply contains a valid uint32_t n_buffers value.", 
        "name": "uint32_t n_buffers", 
        "number": "Grp80No90", 
        "purpose": "Verify OFPT_FEATURES_REPLY contains valid datapath_id field", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3 Controller to switch messages, p. 25.Max packets buffered at once", 
        "remarks": "If possible verify buffer value against the information provided by the vendor.", 
        "req": "Correct implementation of uint32_t n_buffers", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Switch configuration messages/ uint32_t n_buffers", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp90No10": {
        "method": "Configure and connect the Primary-controller on the DUT. Send a packet to the data plane and trigger a packet_in. Verify Reason field is OFPR_NO_MATCH.", 
        "name": "OFPR_NO_MATCH uint8_t reason", 
        "number": "Grp90No10", 
        "purpose": "Verify packet_in specifies the right reason (no match or send to controller)", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4 Asynchronous Messages, p. 36.", 
        "remarks": "", 
        "req": "Correct implementation of OFPR_NO_MATCH", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Asynchronous messages - OFPT_PACKET_IN / OFPR_NO_MATCH uint8_t reason", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp90No100": {
        "method": "Configure and connect the Primary-controller on the DUT. Create flow with ACTION: output to controller. Send matching packet to data plane and trigger packet_in. Verify Reason field is OFPR_ACTION. Verify the correct total_len is reported.", 
        "name": "OFPR_ACTION int16_t total_len", 
        "number": "Grp90No100", 
        "purpose": "Verify packet_in OFPR_ACTION reports correct value for full length of frame", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4 Asynchronous Messages, p. 36.uint16_t total_len; /* Full length of frame. */", 
        "remarks": "", 
        "req": "Correct implementation of OFPR_ACTION uint16_t total_len", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Asynchronous messages - OFPT_PACKET_IN / OFPR_ACTION int16_t total_len", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp90No110": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify the data plane port has link. Bring port down; verify OFPT_PORT_STATUS reason DELETE message is send to the controller. Bring port up again; verify OFPT_PORT_STATUS reason ADD is received at the controller.", 
        "name": "OFPT_PORT_STATUS", 
        "number": "Grp90No110", 
        "purpose": "Verify packet_in OFPR_ACTION reports correct value for full length of frame", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4.3 Port Status messages, p. 38.As physical ports are added, modifed, and removed from the datapath, the controller needs to be informed with the OFPT_PORT_STATUS message.", 
        "remarks": "", 
        "req": "Correct implementation of OFPT_PORT_STATUS", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Asynchronous messages / OFPT_PORT_STATUS", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp90No120": {
        "method": "Configure and connect the Primary-controller on the DUT. Check port flood state, change port state with OFPT_PORT_MOD - No_Flood message. Verify state change took place. Change back to original port state with OFPT_PORT_MOD - No_Flood message. Verify port state change took place.", 
        "name": "OFPT_PORT_MOD - No_Flood", 
        "number": "Grp90No120", 
        "purpose": "Verify Controller is able to use the OFPT_PORT_MOD - No_Flood message to change port state on the DUT", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.2.1 Port Structures, Page 17.OFPPC_NO_FLOOD = 1 << 4, /* Do not include this port when flooding. */OFPPFL_NO_FLOOD is set to 0 when the STP port state is Forwarding,otherwise to 1.", 
        "remarks": "", 
        "req": "Correct implementation of OFPT_PORT_MOD - No_Flood", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Protocol Messages / Controller to switch message/ OFPT_PORT_MOD - No_Flood", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp90No130": {
        "method": "Configure and connect the Primary-controller on the DUT. Check port flood state, change port state with OFPT_PORT_MOD - No_Forward message, verify state change took place. Change back to original port state with OFPT_PORT_MOD - No_Forward message, verify port state change took place.", 
        "name": "OFPT_PORT_MOD - No_Forward", 
        "number": "Grp90No130", 
        "purpose": "Verify Controller is able to use the OFPT_PORT_MOD -  OFPPFL_NO_FWD message to change port state on the DUT", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.2.1 Port Structures, Page 17.OFPPC_NO_FWD = 1 << 5, /* Drop packets forwarded to port. */The OFPPFL_NO_RECV , OFPPFL_NO_RECV_STP ,OFPPFL_NO_FWD , and OFPPFL_NO_PACKET_IN  bits in the OpenFlow portflags may be useful for the controller to implement STP", 
        "remarks": "", 
        "req": "Correct implementation of OFPT_PORT_MOD - OFPPFL_NO_FWD", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Protocol Messages / Controller to switch message/ OFPT_PORT_MOD - No_Forward", 
        "topo": "Control-plane connection between DUT and reference controller.One data plane port."
    }, 
    "Grp90No140": {
        "method": "Configure and connect the Primary-controller on the DUT. Check port flood state, change port state with OFPT_PORT_MOD - OFPPC_NO_PACKET_IN flag, verify state change took place. Change back to original port state. Verify port state change took place.", 
        "name": "OFPT_PORT_MOD - No_Packet_in", 
        "number": "Grp90No140", 
        "purpose": "Verify Controller is able to use the OFPT_PORT_MOD \u2013 OFPPC_NO_PACKET_IN message to change port state on the DUT", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.2.1 Port Structures, Page 17.OFPPC_NO_PACKET_IN = 1 << 6 /* Do not send packet-in msgs for port. */The OFPPFL_NO_RECV , OFPPFL_NO_RECV_STP ,OFPPFL_NO_FWD , and OFPPFL_NO_PACKET_IN  bits in the OpenFlow portflags may be useful for the controller to implement STP", 
        "remarks": "", 
        "req": "Correct implementation of OFPT_PORT_MOD \u2013 OFPPC_NO_PACKET_IN", 
        "results": "Pass or Fail", 
        "status": "", 
        "title": "Protocol Messages / Controller to switch message/ OFPT_PORT_MOD - No_Packet_in", 
        "topo": "Control-plane connection between DUT and reference controller.At least One data plane connection to DUT."
    }, 
    "Grp90No150": {
        "method": "Configure and connect the Primary-controller on the DUT. Send a packet_out message targeting the data plane port. Verify the packet is sent out the switch port.", 
        "name": "OFPT_PACKET_OUT", 
        "number": "Grp90No150", 
        "purpose": "Verify Controller is able to use the OFPT_PACKET_OUT message to send a packet out of one of the DUT ports", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.6 Send Packet Message, Page 35.When the controller wishes to send a packet out through the datapath, it uses the OFPT_PACKET_OUT message", 
        "remarks": "", 
        "req": "Correct implementation of OFPT_PACKET_OUT", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Controller to switch message / OFPT_PACKET_OUT", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane port connected to DUT."
    }, 
    "Grp90No160": {
        "method": "Configure and connect the Primary-controller on the DUT. Send an OFPST_DESC stats request to the DUT, and verify a reply is received. Check valid return values for:char mfr_desc[DESC_STR_LEN; Manufacturer descriptionchar hw_desc[DESC_STR_LEN]; Hardware description.char sw_desc[DESC_STR_LEN]; Software descriptionchar serial_num[SERIAL_NUM_LEN];Serial number.char dp_desc[DESC_STR_LEN]; Human readable description of datapath", 
        "name": "OFPST_DESC", 
        "number": "Grp90No160", 
        "purpose": "Verify Controller is able to respond to OFPST_DESC stats request, and returns valid field values", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.5 Read State Messages, p. 31Information about the switch manufacturer, hardware revision, software revision, serial number, and a description field is available from the OFPST_DESC stats request type", 
        "remarks": "", 
        "req": "Correct implementation of OFPST_DESC stats request / reply", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Controller to switch message / OFPST_DESC stats request / reply", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp90No170": {
        "method": "Configure and connect the Primary-controller on the DUT. Configure queues on the switch outside the OpenFlow protocol. Send an OFPT_QUEUE_GET_CONFIG_REQUEST for any port and verify reply is received. Verify reply has List of configured queues.", 
        "name": "OFPT_QUEUE_GET_CONFIG_REPLY", 
        "number": "Grp90No170", 
        "purpose": "Verify Controller is able to respond to OFPT_QUEUE_GET_CONFIG_REQUEST, and returns valid information", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.3.4 Queue Configuration Messages, p. 29.The controller can query the switch for configured queues on a port", 
        "remarks": "Queue configuration takes place outside the OpenFlow protocol, either through a command line tool or through an external dedicated configuration protocol.", 
        "req": "Correct implementation of OFPT_QUEUE_GET_CONFIG request / reply", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Controller to switch message / OFPT_QUEUE_GET_CONFIG_REPLY", 
        "topo": "Control-plane connection between DUT and reference controller."
    }, 
    "Grp90No20": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify the miss_send_len value is non-zero. Send a packet to the data plane and trigger a packet_in. Verify Reason field is OFPR_NO_MATCH. For buffered packets, verify the number of bytes transferred in the packet_in is in accordance to the miss_send_len configuration.", 
        "name": "OFPR_NO_MATCH unit8_t data[0] buffered", 
        "number": "Grp90No20", 
        "purpose": "Verify packet_in OFPR_NO _MATCH implements buffer handling correct", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4 Asynchronous Messages, p. 36.The buffer_id is an opaque value used by the datapath to identify a buffered packet. When a packet is buffered, some number of bytes from the message will be included in the data portion of the message. If the packet is sent because of a \u201csend to controller\u201d action, then max_len bytes from the action_output of the flow setup request are sent. If the packet is sent because of a flow table miss, then at least miss_send_len bytes from the OFPT_SET_CONFIG message are sent. The default miss_send_len is 128 bytes. If the packet is not buffered, the entire packet is included in the data portion, and the buffer_id is -1", 
        "remarks": "", 
        "req": "Correct implementation of OFPR_NO_MATCH unit8_t data[0]", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Asynchronous messages - OFPT_PACKET_IN / OFPR_NO_MATCH unit8_t data[0] buffered", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp90No30": {
        "method": "Configure and connect the Primary-controller on the DUT. Set miss_send_len value to zero. Send a packet to the data plane and trigger a packet_in. Verify Reason field is OFPR_NO_MATCH. Verify unbuffered packets are included completely in the packet_in, and the buffer-id is set to -1.", 
        "name": "OFPR_NO_MATCH unit8_t data[0] unbuffered", 
        "number": "Grp90No30", 
        "purpose": "Verify packet_in OFPR_NO _MATCH implements buffer handling correct", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4 Asynchronous Messages, p. 36.The buffer_id is an opaque value used by the datapath to identify a buffered packet. When a packet is buffered, some number of bytes from the message will be included in the data portion of the message. If the packet is sent because of a \u201csend to controller\u201d action, then max_len bytes from the action_output of the flow setup request are sent. If the packet is sent because of a flow table miss, then at least miss_send_len bytes from the OFPT_SET_CONFIG message are sent. The default miss_send_len is 128 bytes. If the packet is not buffered, the entire packet is included in the data portion, and the buffer_id is -1", 
        "remarks": "", 
        "req": "Correct implementation of OFPR_NO_MATCH unit8_t data[0]", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Asynchronous messages - OFPT_PACKET_IN / OFPR_NO_MATCH unit8_t data[0] unbuffered", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp90No40": {
        "method": "Configure and connect the Primary-controller on the DUT. Send a packet to the data plane and trigger a packet_in. Verify Reason field is OFPR_NO_MATCH. Verify the correct in_port is reported", 
        "name": "OFPR_NO_MATCH uint16_t in_port", 
        "number": "Grp90No40", 
        "purpose": "Verify packet_in OFPR_NO _MATCH reports correct inport", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4 Asynchronous Messages, p. 36.uint16_t in_port; /* Port on which frame was received. */", 
        "remarks": "", 
        "req": "Correct implementation of OFPR_NO_MATCH uint16_t in_port", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Asynchronous messages - OFPT_PACKET_IN / OFPR_NO_MATCH uint16_t in_port", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp90No50": {
        "method": "Configure and connect the Primary-controller on the DUT. Send packet to data plane and trigger packet_in. Verify Reason field is OFPR_NO_MATCH. Verify the correct total_len is reported", 
        "name": "OFPR_NO_MATCH int16_t total_len", 
        "number": "Grp90No50", 
        "purpose": "Verify packet_in OFPR_NO _MATCH reports correct value for full length of frame", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4 Asynchronous Messages, p. 36.uint16_t total_len; /* Full length of frame. */", 
        "remarks": "", 
        "req": "Correct implementation of OFPR_NO_MATCH uint16_t total_len", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Asynchronous messages - OFPT_PACKET_IN / OFPR_NO_MATCH int16_t total_len", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp90No60": {
        "method": "Configure and connect the Primary-controller on the DUT. Create flow with ACTION: output to controller. Send matching packet  to data plane and trigger packet_in. Verify Reason field is OFPR_ACTION.", 
        "name": "OFPR_Action uint8_t reason", 
        "number": "Grp90No60", 
        "purpose": "Verify packet_in specifies the correct reason for Action explicitly output to controller", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4 Asynchronous Messages, p. 36.uint8_t reason; /* Reason packet is being sent (one of OFPR_*) */", 
        "remarks": "", 
        "req": "Correct implementation of OFPR_Action uint8_t reason", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Asynchronous messages - OFPT_PACKET_IN / OFPR_Action uint8_t reason", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp90No70": {
        "method": "Configure and connect the Primary-controller on the DUT. Verify max_len value is non-zero. Create flow with ACTION: output to controller. Send matching packet to data plane and trigger packet_in. Verify Reason field is OFPR_ACTION. Verify that for buffered packets the amount of bytes transferred in the packet_in is in accordance to the max_len configuration.", 
        "name": "OFPR_ACTION unit8_t data[0] buffered", 
        "number": "Grp90No70", 
        "purpose": "Verify packet_in OFPR_ACTION implements buffer handling correct", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4 Asynchronous Messages, p. 36.The buffer_id is an opaque value used by the datapath to identify a buffered packet. When a packet is buffered, some number of bytes from the message will be included in the data portion of the message. If the packet is sent because of a \u201csend to controller\u201d action, then max_len bytes from the action_output of the flow setup request are sent. If the packet is sent because of a flow table miss, then at least miss_send_len bytes from the OFPT_SET_CONFIG message are sent. The default miss_send_len is 128 bytes. If the packet is not buffered, the entire packet is included in the data portion, and the buffer_id is -1", 
        "remarks": "", 
        "req": "Correct implementation of OFPR_ACTION unit8_t data[0]", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Asynchronous messages - OFPT_PACKET_IN / OFPR_ACTION unit8_t data[0] buffered", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp90No80": {
        "method": "Configure and connect the Primary-controller on the DUT. Create flow with ACTION: output to controller. Send matching packet size l to data plane and trigger packet_in. Verify Reason field is OFPR_ACTION. Verify that not buffered packets are included completely in the packet_in, and the buffer-id is set to -1.", 
        "name": "OFPR_ACTION unit8_t data[0] unbuffered", 
        "number": "Grp90No80", 
        "purpose": "Verify packet_in OFPR_ACTION implements buffer handling correct", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4 Asynchronous Messages, p. 36.The buffer_id is an opaque value used by the datapath to identify a buffered packet. When a packet is buffered, some number of bytes from the message will be included in the data portion of the message. If the packet is sent because of a \u201csend to controller\u201d action, then max_len bytes from the action_output of the flow setup request are sent. If the packet is sent because of a flow table miss, then at least miss_send_len bytes from the OFPT_SET_CONFIG message are sent. The default miss_send_len is 128 bytes. If the packet is not buffered, the entire packet is included in the data portion, and the buffer_id is -1", 
        "remarks": "", 
        "req": "Correct implementation of OFPR_ACTION unit8_t data[0]", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Asynchronous messages - OFPT_PACKET_IN / OFPR_ACTION unit8_t data[0] unbuffered", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }, 
    "Grp90No90": {
        "method": "Configure and connect the Primary-controller on the DUT. Create flow with ACTION: output to controller. Send matching packet to data plane and trigger packet_in. Verify Reason field is OFPR_ACTION . Verify the correct in_port is reported", 
        "name": "OFPR_ACTION uint16_t in_port", 
        "number": "Grp90No90", 
        "purpose": "Verify packet_in OFPR_ACTION reports correct inport", 
        "ref": "OpenFlow Switch Specification 1.0.0, 5.4 Asynchronous Messages, p. 36.uint16_t in_port; /* Port on which frame was received. */", 
        "remarks": "", 
        "req": "Correct implementation of OFPR_ACTION uint16_t in_port", 
        "results": "Pass or Fail", 
        "status": "ALL", 
        "title": "Protocol Messages / Asynchronous messages - OFPT_PACKET_IN / OFPR_ACTION uint16_t in_port", 
        "topo": "Control-plane connection between DUT and reference controller.At least one data plane connection to DUT."
    }
}
